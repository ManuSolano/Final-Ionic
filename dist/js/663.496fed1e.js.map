{"version":3,"file":"js/663.496fed1e.js","mappings":"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","sources":["webpack://final-ionic/./node_modules/@firebase/database/dist/index.esm2017.js"],"sourcesContent":["import { getApp, _getProvider, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, isNodeSdk, base64, stringToByteArray, Sha1, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst name = \"@firebase/database\";\nconst version = \"0.13.0\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** The semver (www.semver.org) version of the SDK. */\r\nlet SDK_VERSION = '';\r\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\r\nfunction setSDKVersion(version) {\r\n    SDK_VERSION = version;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\r\nclass DOMStorageWrapper {\r\n    /**\r\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    constructor(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param key - The key to save the value under\r\n     * @param value - The value being stored, or null to remove the key.\r\n     */\r\n    set(key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\r\n        }\r\n    }\r\n    /**\r\n     * @returns The value that was stored under this key, or null\r\n     */\r\n    get(key) {\r\n        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return jsonEval(storedVal);\r\n        }\r\n    }\r\n    remove(key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    }\r\n    prefixedName_(name) {\r\n        return this.prefix_ + name;\r\n    }\r\n    toString() {\r\n        return this.domStorage_.toString();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\r\nclass MemoryStorage {\r\n    constructor() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    set(key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    }\r\n    get(key) {\r\n        if (contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    }\r\n    remove(key) {\r\n        delete this.cache_[key];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\r\nconst createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            const domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nconst PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\r\nconst LUIDGenerator = (function () {\r\n    let id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\r\nconst sha1 = function (str) {\r\n    const utf8Bytes = stringToByteArray(str);\r\n    const sha1 = new Sha1();\r\n    sha1.update(utf8Bytes);\r\n    const sha1Bytes = sha1.digest();\r\n    return base64.encodeByteArray(sha1Bytes);\r\n};\r\nconst buildLogMessage_ = function (...varArgs) {\r\n    let message = '';\r\n    for (let i = 0; i < varArgs.length; i++) {\r\n        const arg = varArgs[i];\r\n        if (Array.isArray(arg) ||\r\n            (arg &&\r\n                typeof arg === 'object' &&\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                typeof arg.length === 'number')) {\r\n            message += buildLogMessage_.apply(null, arg);\r\n        }\r\n        else if (typeof arg === 'object') {\r\n            message += stringify(arg);\r\n        }\r\n        else {\r\n            message += arg;\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\r\nlet logger = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n */\r\nlet firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\r\nconst enableLogging$1 = function (logger_, persistent) {\r\n    assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = LogLevel.VERBOSE;\r\n        logger = logClient.log.bind(logClient);\r\n        if (persistent) {\r\n            SessionStorage.set('logging_enabled', true);\r\n        }\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger = logger_;\r\n    }\r\n    else {\r\n        logger = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\nconst log = function (...varArgs) {\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\r\n            enableLogging$1(true);\r\n        }\r\n    }\r\n    if (logger) {\r\n        const message = buildLogMessage_.apply(null, varArgs);\r\n        logger(message);\r\n    }\r\n};\r\nconst logWrapper = function (prefix) {\r\n    return function (...varArgs) {\r\n        log(prefix, ...varArgs);\r\n    };\r\n};\r\nconst error = function (...varArgs) {\r\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\r\n    logClient.error(message);\r\n};\r\nconst fatal = function (...varArgs) {\r\n    const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\nconst warn = function (...varArgs) {\r\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nconst warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\r\nconst isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data !== data || // NaN\r\n            data === Number.POSITIVE_INFINITY ||\r\n            data === Number.NEGATIVE_INFINITY));\r\n};\r\nconst executeWhenDOMReady = function (fn) {\r\n    if (isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        let called = false;\r\n        const wrappedFn = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called) {\r\n                called = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn, false);\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            document.attachEvent('onreadystatechange', () => {\r\n                if (document.readyState === 'complete') {\r\n                    wrappedFn();\r\n                }\r\n            });\r\n            // fallback to onload.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            window.attachEvent('onload', wrappedFn);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\r\nconst MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\r\nconst MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\r\nconst nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @returns {!number} comparison result.\r\n */\r\nconst stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\nconst requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\r\n    }\r\n};\r\nconst ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return stringify(obj);\r\n    }\r\n    const keys = [];\r\n    // eslint-disable-next-line guard-for-in\r\n    for (const k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    let key = '{';\r\n    for (let i = 0; i < keys.length; i++) {\r\n        if (i !== 0) {\r\n            key += ',';\r\n        }\r\n        key += stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\r\nconst splitStringBySize = function (str, segsize) {\r\n    const len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    const dataSegs = [];\r\n    for (let c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\r\nfunction each(obj, fn) {\r\n    for (const key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\r\nconst doubleToIEEE754String = function (v) {\r\n    assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    const ebits = 11, fbits = 52;\r\n    const bias = (1 << (ebits - 1)) - 1;\r\n    let s, e, f, ln, i;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    const bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    const str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    let hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1) {\r\n            hexByte = '0' + hexByte;\r\n        }\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\r\nconst isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\r\nconst isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\r\nfunction errorForServerCode(code, query) {\r\n    let reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code === 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code === 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n}\r\n/**\r\n * Used to test for integer-looking strings\r\n */\r\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\r\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MIN = -2147483648;\r\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MAX = 2147483647;\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\r\nconst tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        const intVal = Number(str);\r\n        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\r\nconst exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(() => {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            const stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\r\nconst beingCrawled = function () {\r\n    const userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\r\nconst setTimeoutNonBlocking = function (fn, time) {\r\n    const timeout = setTimeout(fn, time);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if (typeof timeout === 'object' && timeout['unref']) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\r\nclass AppCheckTokenProvider {\r\n    constructor(appName_, appCheckProvider) {\r\n        this.appName_ = appName_;\r\n        this.appCheckProvider = appCheckProvider;\r\n        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });\r\n        if (!this.appCheck) {\r\n            appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => (this.appCheck = appCheck));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.appCheck) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAppCheck. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // AppCheck and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.appCheck) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.appCheck.getToken(forceRefresh);\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        var _a;\r\n        (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\r\n            'are invalid. This usually indicates your app was not initialized correctly.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nclass FirebaseAuthTokenProvider {\r\n    constructor(appName_, firebaseOptions_, authProvider_) {\r\n        this.appName_ = appName_;\r\n        this.firebaseOptions_ = firebaseOptions_;\r\n        this.authProvider_ = authProvider_;\r\n        this.auth_ = null;\r\n        this.auth_ = authProvider_.getImmediate({ optional: true });\r\n        if (!this.auth_) {\r\n            authProvider_.onInit(auth => (this.auth_ = auth));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.auth_) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAuth. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // Auth and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.auth_) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.auth_.getToken(forceRefresh).catch(error => {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error && error.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        if (this.auth_) {\r\n            this.auth_.addAuthTokenListener(listener);\r\n        }\r\n        else {\r\n            this.authProvider_\r\n                .get()\r\n                .then(auth => auth.addAuthTokenListener(listener));\r\n        }\r\n    }\r\n    removeTokenChangeListener(listener) {\r\n        this.authProvider_\r\n            .get()\r\n            .then(auth => auth.removeAuthTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        let errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.appName_ +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    }\r\n}\r\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\r\nclass EmulatorTokenProvider {\r\n    constructor(accessToken) {\r\n        this.accessToken = accessToken;\r\n    }\r\n    getToken(forceRefresh) {\r\n        return Promise.resolve({\r\n            accessToken: this.accessToken\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // Invoke the listener immediately to match the behavior in Firebase Auth\r\n        // (see packages/auth/src/auth.js#L1807)\r\n        listener(this.accessToken);\r\n    }\r\n    removeTokenChangeListener(listener) { }\r\n    notifyForInvalidToken() { }\r\n}\r\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\r\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PROTOCOL_VERSION = '5';\r\nconst VERSION_PARAM = 'v';\r\nconst TRANSPORT_SESSION_PARAM = 's';\r\nconst REFERER_PARAM = 'r';\r\nconst FORGE_REF = 'f';\r\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\r\n// firebase.corp.google.com\r\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\r\nconst LAST_SESSION_PARAM = 'ls';\r\nconst APPLICATION_ID_PARAM = 'p';\r\nconst APP_CHECK_TOKEN_PARAM = 'ac';\r\nconst WEBSOCKET = 'websocket';\r\nconst LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n */\r\nclass RepoInfo {\r\n    /**\r\n     * @param host - Hostname portion of the url for the repo\r\n     * @param secure - Whether or not this repo is accessed over ssl\r\n     * @param namespace - The namespace represented by the repo\r\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n     * @param persistenceKey - Override the default session persistence storage key\r\n     */\r\n    constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false) {\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.nodeAdmin = nodeAdmin;\r\n        this.persistenceKey = persistenceKey;\r\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\r\n        this._host = host.toLowerCase();\r\n        this._domain = this._host.substr(this._host.indexOf('.') + 1);\r\n        this.internalHost =\r\n            PersistentStorage.get('host:' + host) || this._host;\r\n    }\r\n    isCacheableHost() {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    }\r\n    isCustomHost() {\r\n        return (this._domain !== 'firebaseio.com' &&\r\n            this._domain !== 'firebaseio-demo.com');\r\n    }\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this._host, this.internalHost);\r\n            }\r\n        }\r\n    }\r\n    toString() {\r\n        let str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    }\r\n    toURLString() {\r\n        const protocol = this.secure ? 'https://' : 'http://';\r\n        const query = this.includeNamespaceInQueryParams\r\n            ? `?ns=${this.namespace}`\r\n            : '';\r\n        return `${protocol}${this.host}/${query}`;\r\n    }\r\n}\r\nfunction repoInfoNeedsQueryParam(repoInfo) {\r\n    return (repoInfo.host !== repoInfo.internalHost ||\r\n        repoInfo.isCustomHost() ||\r\n        repoInfo.includeNamespaceInQueryParams);\r\n}\r\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\r\nfunction repoInfoConnectionURL(repoInfo, type, params) {\r\n    assert(typeof type === 'string', 'typeof type must == string');\r\n    assert(typeof params === 'object', 'typeof params must == object');\r\n    let connURL;\r\n    if (type === WEBSOCKET) {\r\n        connURL =\r\n            (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\r\n    }\r\n    else if (type === LONG_POLLING) {\r\n        connURL =\r\n            (repoInfo.secure ? 'https://' : 'http://') +\r\n                repoInfo.internalHost +\r\n                '/.lp?';\r\n    }\r\n    else {\r\n        throw new Error('Unknown connection type: ' + type);\r\n    }\r\n    if (repoInfoNeedsQueryParam(repoInfo)) {\r\n        params['ns'] = repoInfo.namespace;\r\n    }\r\n    const pairs = [];\r\n    each(params, (key, value) => {\r\n        pairs.push(key + '=' + value);\r\n    });\r\n    return connURL + pairs.join('&');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n */\r\nclass StatsCollection {\r\n    constructor() {\r\n        this.counters_ = {};\r\n    }\r\n    incrementCounter(name, amount = 1) {\r\n        if (!contains(this.counters_, name)) {\r\n            this.counters_[name] = 0;\r\n        }\r\n        this.counters_[name] += amount;\r\n    }\r\n    get() {\r\n        return deepCopy(this.counters_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst collections = {};\r\nconst reporters = {};\r\nfunction statsManagerGetCollection(repoInfo) {\r\n    const hashString = repoInfo.toString();\r\n    if (!collections[hashString]) {\r\n        collections[hashString] = new StatsCollection();\r\n    }\r\n    return collections[hashString];\r\n}\r\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\r\n    const hashString = repoInfo.toString();\r\n    if (!reporters[hashString]) {\r\n        reporters[hashString] = creatorFunction();\r\n    }\r\n    return reporters[hashString];\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\r\nclass PacketReceiver {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    constructor(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    closeAfter(responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    }\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     */\r\n    handleResponse(requestNum, data) {\r\n        this.pendingResponses[requestNum] = data;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            const toProcess = this.pendingResponses[this.currentResponseNum];\r\n            delete this.pendingResponses[this.currentResponseNum];\r\n            for (let i = 0; i < toProcess.length; ++i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(() => {\r\n                        this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            }\r\n            if (this.currentResponseNum === this.closeAfterResponse) {\r\n                if (this.onClose) {\r\n                    this.onClose();\r\n                    this.onClose = null;\r\n                }\r\n                break;\r\n            }\r\n            this.currentResponseNum++;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nconst MAX_URL_DATA_SIZE = 1870;\r\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\r\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\r\nconst LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n */\r\nclass BrowserPollConnection {\r\n    /**\r\n     * @param connId An identifier for this connection, used for logging\r\n     * @param repoInfo The info for the endpoint to send data to.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The AppCheck token for this client.\r\n     * @param authToken The AuthToken to use for this connection.\r\n     * @param transportSessionId Optional transportSessionid if we are\r\n     * reconnecting for an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n     * already created a connection previously\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.urlFn = (params) => {\r\n            // Always add the token if we have one.\r\n            if (this.appCheckToken) {\r\n                params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(() => {\r\n            this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            this.onClosed_();\r\n            this.connectTimeoutTimer_ = null;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(() => {\r\n            if (this.isClosed_) {\r\n                return;\r\n            }\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\r\n                const [command, arg1, arg2, arg3, arg4] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                if (!this.scriptTagHolder) {\r\n                    return; // we closed the connection.\r\n                }\r\n                if (this.connectTimeoutTimer_) {\r\n                    clearTimeout(this.connectTimeoutTimer_);\r\n                    this.connectTimeoutTimer_ = null;\r\n                }\r\n                this.everConnected_ = true;\r\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\r\n                    this.id = arg1;\r\n                    this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        this.myPacketOrderer.closeAfter(arg1, () => {\r\n                            this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, (...args) => {\r\n                const [pN, data] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                this.myPacketOrderer.handleResponse(pN, data);\r\n            }, () => {\r\n                this.onClosed_();\r\n            }, this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (this.scriptTagHolder.uniqueCallbackIdentifier) {\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\r\n                    this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            }\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\r\n            }\r\n            if (this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\r\n            }\r\n            if (this.applicationId) {\r\n                urlParams[APPLICATION_ID_PARAM] = this.applicationId;\r\n            }\r\n            if (this.appCheckToken) {\r\n                urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            if (typeof location !== 'undefined' &&\r\n                location.hostname &&\r\n                FORGE_DOMAIN_RE.test(location.hostname)) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            const connectURL = this.urlFn(urlParams);\r\n            this.log_('Connecting via long-poll to ' + connectURL);\r\n            this.scriptTagHolder.addTag(connectURL, () => {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    start() {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    }\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    static forceAllow() {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    }\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    static forceDisallow() {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    }\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    static isAvailable() {\r\n        if (isNodeSdk()) {\r\n            return false;\r\n        }\r\n        else if (BrowserPollConnection.forceAllow_) {\r\n            return true;\r\n        }\r\n        else {\r\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n            return (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp());\r\n        }\r\n    }\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    markConnectionHealthy() { }\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     */\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    }\r\n    /**\r\n     * Triggered when this transport is closed\r\n     */\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param data - The JSON data to transmit.\r\n     */\r\n    send(data) {\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        const base64data = base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    }\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     */\r\n    addDisconnectPingFrame(id, pw) {\r\n        if (isNodeSdk()) {\r\n            return;\r\n        }\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        const urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    }\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     */\r\n    incrementIncomingBytes_(args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        const bytesReceived = stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    }\r\n}\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\r\nclass FirebaseIFrameScriptHolder {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        this.outstandingRequests = new Set();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\r\n                onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            let script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                const currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            const iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     */\r\n    static createIFrame_() {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                const a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                const domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (iframe.document) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    }\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    close() {\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\r\n            this.myIFrame.doc.body.innerHTML = '';\r\n            setTimeout(() => {\r\n                if (this.myIFrame !== null) {\r\n                    document.body.removeChild(this.myIFrame);\r\n                    this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        // Protect from being called recursively.\r\n        const onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param id - The ID of this connection\r\n     * @param pw - The password for this connection\r\n     */\r\n    startLongPoll(id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    }\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    newRequest_() {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            let theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            let curDataString = '';\r\n            let i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                const nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length +\r\n                    SEG_HEADER_SIZE +\r\n                    curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    const theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    enqueueSegment(segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    }\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param url - The URL of the script tag.\r\n     * @param serial - The serial number of the request.\r\n     */\r\n    addLongPollTag_(url, serial) {\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial);\r\n        const doNewRequest = () => {\r\n            this.outstandingRequests.delete(serial);\r\n            this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        const readyStateCB = () => {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    }\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param url - The URL for the script tag source.\r\n     * @param loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    addTag(url, loadCB) {\r\n        if (isNodeSdk()) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!this.sendNewPolls) {\r\n                        return;\r\n                    }\r\n                    const newScript = this.myIFrame.doc.createElement('script');\r\n                    newScript.type = 'text/javascript';\r\n                    newScript.async = true;\r\n                    newScript.src = url;\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    newScript.onload = newScript.onreadystatechange =\r\n                        function () {\r\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                            const rstate = newScript.readyState;\r\n                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                                newScript.onload = newScript.onreadystatechange = null;\r\n                                if (newScript.parentNode) {\r\n                                    newScript.parentNode.removeChild(newScript);\r\n                                }\r\n                                loadCB();\r\n                            }\r\n                        };\r\n                    newScript.onerror = () => {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        this.sendNewPolls = false;\r\n                        this.close();\r\n                    };\r\n                    this.myIFrame.doc.body.appendChild(newScript);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nlet WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\r\nclass WebSocketConnection {\r\n    /**\r\n     * @param connId identifier for this transport\r\n     * @param repoInfo The info for the websocket endpoint.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The App Check Token for this client.\r\n     * @param authToken The Auth Token for this client.\r\n     * @param transportSessionId Optional transportSessionId if this is connecting\r\n     * to an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if there was a previous\r\n     * connection\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);\r\n        this.nodeAdmin = repoInfo.nodeAdmin;\r\n    }\r\n    /**\r\n     * @param repoInfo - The info for the websocket endpoint.\r\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n     * @returns connection url\r\n     */\r\n    static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {\r\n        const urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.hostname &&\r\n            FORGE_DOMAIN_RE.test(location.hostname)) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        if (appCheckToken) {\r\n            urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\r\n        }\r\n        if (applicationId) {\r\n            urlParams[APPLICATION_ID_PARAM] = applicationId;\r\n        }\r\n        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            let options;\r\n            if (isNodeSdk()) {\r\n                const device = this.nodeAdmin ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                const options = {\r\n                    headers: {\r\n                        'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\r\n                        'X-Firebase-GMPID': this.applicationId || ''\r\n                    }\r\n                };\r\n                // If using Node with admin creds, AppCheck-related checks are unnecessary.\r\n                // Note that we send the credentials here even if they aren't admin credentials, which is\r\n                // not a problem.\r\n                // Note that this header is just used to bypass appcheck, and the token should still be sent\r\n                // through the websocket connection once it is established.\r\n                if (this.authToken) {\r\n                    options.headers['Authorization'] = `Bearer ${this.authToken}`;\r\n                }\r\n                if (this.appCheckToken) {\r\n                    options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\r\n                }\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                const env = process['env'];\r\n                const proxy = this.connURL.indexOf('wss://') === 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n            }\r\n            this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = () => {\r\n            this.log_('Websocket connected.');\r\n            this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = () => {\r\n            this.log_('Websocket connection was disconnected.');\r\n            this.mySock = null;\r\n            this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = m => {\r\n            this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = e => {\r\n            this.log_('WebSocket error.  Closing connection.');\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n        };\r\n    }\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    start() { }\r\n    static forceDisallow() {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    }\r\n    static isAvailable() {\r\n        let isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    }\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     */\r\n    static previouslyFailed() {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    }\r\n    markConnectionHealthy() {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    }\r\n    appendFrame_(data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length === this.totalFrames) {\r\n            const fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            const jsonMess = jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    }\r\n    /**\r\n     * @param frameCount - The number of frames we are expecting from the server\r\n     */\r\n    handleNewFrameCount_(frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    }\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @returns Any remaining data to be process, or null if there is none\r\n     */\r\n    extractFrameCount_(data) {\r\n        assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            const frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    }\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess - The frame data\r\n     */\r\n    handleIncomingFrame(mess) {\r\n        if (this.mySock === null) {\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        }\r\n        const data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            const remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Send a message to the server\r\n     * @param data - The JSON object to transmit\r\n     */\r\n    send(data) {\r\n        this.resetKeepAlive();\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    }\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    }\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    resetKeepAlive() {\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(() => {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (this.mySock) {\r\n                this.sendString_('0');\r\n            }\r\n            this.resetKeepAlive();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    }\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param str - String to send.\r\n     */\r\n    sendString_(str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\r\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\r\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\r\nclass TransportManager {\r\n    /**\r\n     * @param repoInfo - Metadata around the namespace we're connecting to\r\n     */\r\n    constructor(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    static get ALL_TRANSPORTS() {\r\n        return [BrowserPollConnection, WebSocketConnection];\r\n    }\r\n    /**\r\n     * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\r\n     * TransportManager has already set up transports_\r\n     */\r\n    static get IS_TRANSPORT_INITIALIZED() {\r\n        return this.globalTransportInitialized_;\r\n    }\r\n    initTransports_(repoInfo) {\r\n        const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable) {\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            }\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            const transports = (this.transports_ = []);\r\n            for (const transport of TransportManager.ALL_TRANSPORTS) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports.push(transport);\r\n                }\r\n            }\r\n            TransportManager.globalTransportInitialized_ = true;\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the initial transport to use\r\n     */\r\n    initialTransport() {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the next transport, or null\r\n     */\r\n    upgradeTransport() {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n// Keeps track of whether the TransportManager has already chosen a transport to use\r\nTransportManager.globalTransportInitialized_ = false;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nconst UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nconst MESSAGE_TYPE = 't';\r\nconst MESSAGE_DATA = 'd';\r\nconst CONTROL_SHUTDOWN = 's';\r\nconst CONTROL_RESET = 'r';\r\nconst CONTROL_ERROR = 'e';\r\nconst CONTROL_PONG = 'o';\r\nconst SWITCH_ACK = 'a';\r\nconst END_TRANSMISSION = 'n';\r\nconst PING = 'p';\r\nconst SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\r\nclass Connection {\r\n    /**\r\n     * @param id - an id for this connection\r\n     * @param repoInfo_ - the info for the endpoint to connect to\r\n     * @param applicationId_ - the Firebase App ID for this project\r\n     * @param appCheckToken_ - The App Check Token for this device.\r\n     * @param authToken_ - The auth token for this session.\r\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.appCheckToken_ = appCheckToken_;\r\n        this.authToken_ = authToken_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     */\r\n    start_() {\r\n        const conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessageReceived = this.connReceiver_(this.conn_);\r\n        const onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(() => {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        const healthyTimeoutMS = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeoutMS > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(() => {\r\n                this.healthyTimeout_ = null;\r\n                if (!this.isHealthy_) {\r\n                    if (this.conn_ &&\r\n                        this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        this.isHealthy_ = true;\r\n                        this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (this.conn_ &&\r\n                        this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        this.log_('Closing unhealthy connection after timeout.');\r\n                        this.close();\r\n                    }\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            }, Math.floor(healthyTimeoutMS));\r\n        }\r\n    }\r\n    nextTransportId_() {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    }\r\n    disconnReceiver_(conn) {\r\n        return everConnected => {\r\n            if (conn === this.conn_) {\r\n                this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === this.secondaryConn_) {\r\n                this.log_('Secondary connection lost.');\r\n                this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                this.log_('closing an old connection');\r\n            }\r\n        };\r\n    }\r\n    connReceiver_(conn) {\r\n        return (message) => {\r\n            if (this.state_ !== 2 /* DISCONNECTED */) {\r\n                if (conn === this.rx_) {\r\n                    this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === this.secondaryConn_) {\r\n                    this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @param dataMsg - An arbitrary data message to be sent to the server\r\n     */\r\n    sendRequest(dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        const msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    }\r\n    tryCleanupConnection() {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    }\r\n    onSecondaryControl_(controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            const cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    }\r\n    onSecondaryMessageReceived_(parsedData) {\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    }\r\n    upgradeIfSecondaryHealthy_() {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    proceedWithUpgrade_() {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    }\r\n    onPrimaryMessageReceived_(parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    }\r\n    onPrimaryResponse_() {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    }\r\n    onControl_(controlData) {\r\n        const cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            const payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                this.onHandshake_(payload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (let i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param handshake - The handshake data returned from the server\r\n     */\r\n    onHandshake_(handshake) {\r\n        const timestamp = handshake.ts;\r\n        const version = handshake.v;\r\n        const host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.host = host;\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ === 0 /* CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    }\r\n    tryStartUpgrade_() {\r\n        const conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    }\r\n    startUpgrade_(conn) {\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessage = this.connReceiver_(this.secondaryConn_);\r\n        const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(() => {\r\n            if (this.secondaryConn_) {\r\n                this.log_('Timed out trying to upgrade.');\r\n                this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    }\r\n    onReset_(host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.host = host;\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    }\r\n    onConnectionEstablished_(conn, timestamp) {\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(() => {\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    }\r\n    sendPingOnPrimaryIfNecessary_() {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    onSecondaryConnectionLost_() {\r\n        const conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    }\r\n    /**\r\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     */\r\n    onConnectionLost_(everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    }\r\n    onConnectionShutdown_(reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    }\r\n    sendData_(data) {\r\n        if (this.state_ !== 1 /* CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    }\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    close() {\r\n        if (this.state_ !== 2 /* DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    closeConnections_() {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nclass ServerActions {\r\n    put(pathString, data, onComplete, hash) { }\r\n    merge(pathString, data, onComplete, hash) { }\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param token - The authentication token\r\n     */\r\n    refreshAuthToken(token) { }\r\n    /**\r\n     * Refreshes the app check token for the current connection.\r\n     * @param token The app check token\r\n     */\r\n    refreshAppCheckToken(token) { }\r\n    onDisconnectPut(pathString, data, onComplete) { }\r\n    onDisconnectMerge(pathString, data, onComplete) { }\r\n    onDisconnectCancel(pathString, onComplete) { }\r\n    reportStats(stats) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nclass EventEmitter {\r\n    constructor(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     */\r\n    trigger(eventType, ...varArgs) {\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            const listeners = [...this.listeners_[eventType]];\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, varArgs);\r\n            }\r\n        }\r\n    }\r\n    on(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback, context });\r\n        const eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    }\r\n    off(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        const listeners = this.listeners_[eventType] || [];\r\n        for (let i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    validateEventType_(eventType) {\r\n        assert(this.allowedEvents_.find(et => {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\r\nclass OnlineMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['online']);\r\n        this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !isMobileCordova()) {\r\n            window.addEventListener('online', () => {\r\n                if (!this.online_) {\r\n                    this.online_ = true;\r\n                    this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', () => {\r\n                if (this.online_) {\r\n                    this.online_ = false;\r\n                    this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new OnlineMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    }\r\n    currentlyOnline() {\r\n        return this.online_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Maximum key depth. */\r\nconst MAX_PATH_DEPTH = 32;\r\n/** Maximum number of (UTF8) bytes in a Firebase path. */\r\nconst MAX_PATH_LENGTH_BYTES = 768;\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nclass Path {\r\n    /**\r\n     * @param pathOrString - Path string to parse, or another path, or the raw\r\n     * tokens array\r\n     */\r\n    constructor(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            let copyTo = 0;\r\n            for (let i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    toString() {\r\n        let pathString = '';\r\n        for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '') {\r\n                pathString += '/' + this.pieces_[i];\r\n            }\r\n        }\r\n        return pathString || '/';\r\n    }\r\n}\r\nfunction newEmptyPath() {\r\n    return new Path('');\r\n}\r\nfunction pathGetFront(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    return path.pieces_[path.pieceNum_];\r\n}\r\n/**\r\n * @returns The number of segments in this path\r\n */\r\nfunction pathGetLength(path) {\r\n    return path.pieces_.length - path.pieceNum_;\r\n}\r\nfunction pathPopFront(path) {\r\n    let pieceNum = path.pieceNum_;\r\n    if (pieceNum < path.pieces_.length) {\r\n        pieceNum++;\r\n    }\r\n    return new Path(path.pieces_, pieceNum);\r\n}\r\nfunction pathGetBack(path) {\r\n    if (path.pieceNum_ < path.pieces_.length) {\r\n        return path.pieces_[path.pieces_.length - 1];\r\n    }\r\n    return null;\r\n}\r\nfunction pathToUrlEncodedString(path) {\r\n    let pathString = '';\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        if (path.pieces_[i] !== '') {\r\n            pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\r\n        }\r\n    }\r\n    return pathString || '/';\r\n}\r\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\r\nfunction pathSlice(path, begin = 0) {\r\n    return path.pieces_.slice(path.pieceNum_ + begin);\r\n}\r\nfunction pathParent(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\nfunction pathChild(path, childPathObj) {\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    if (childPathObj instanceof Path) {\r\n        for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n            pieces.push(childPathObj.pieces_[i]);\r\n        }\r\n    }\r\n    else {\r\n        const childPieces = childPathObj.split('/');\r\n        for (let i = 0; i < childPieces.length; i++) {\r\n            if (childPieces[i].length > 0) {\r\n                pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\n/**\r\n * @returns True if there are no segments in this path\r\n */\r\nfunction pathIsEmpty(path) {\r\n    return path.pieceNum_ >= path.pieces_.length;\r\n}\r\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\r\nfunction newRelativePath(outerPath, innerPath) {\r\n    const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);\r\n    if (outer === null) {\r\n        return innerPath;\r\n    }\r\n    else if (outer === inner) {\r\n        return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\r\n    }\r\n    else {\r\n        throw new Error('INTERNAL ERROR: innerPath (' +\r\n            innerPath +\r\n            ') is not within ' +\r\n            'outerPath (' +\r\n            outerPath +\r\n            ')');\r\n    }\r\n}\r\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\r\nfunction pathCompare(left, right) {\r\n    const leftKeys = pathSlice(left, 0);\r\n    const rightKeys = pathSlice(right, 0);\r\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n        const cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n        if (cmp !== 0) {\r\n            return cmp;\r\n        }\r\n    }\r\n    if (leftKeys.length === rightKeys.length) {\r\n        return 0;\r\n    }\r\n    return leftKeys.length < rightKeys.length ? -1 : 1;\r\n}\r\n/**\r\n * @returns true if paths are the same.\r\n */\r\nfunction pathEquals(path, other) {\r\n    if (pathGetLength(path) !== pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @returns True if this path is a parent (or the same as) other\r\n */\r\nfunction pathContains(path, other) {\r\n    let i = path.pieceNum_;\r\n    let j = other.pieceNum_;\r\n    if (pathGetLength(path) > pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    while (i < path.pieces_.length) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n        ++i;\r\n        ++j;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nclass ValidationPath {\r\n    /**\r\n     * @param path - Initial Path.\r\n     * @param errorPrefix_ - Prefix for any error messages.\r\n     */\r\n    constructor(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        this.parts_ = pathSlice(path, 0);\r\n        /** Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (let i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += stringLength(this.parts_[i]);\r\n        }\r\n        validationPathCheckValid(this);\r\n    }\r\n}\r\nfunction validationPathPush(validationPath, child) {\r\n    // Count the needed '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ += 1;\r\n    }\r\n    validationPath.parts_.push(child);\r\n    validationPath.byteLength_ += stringLength(child);\r\n    validationPathCheckValid(validationPath);\r\n}\r\nfunction validationPathPop(validationPath) {\r\n    const last = validationPath.parts_.pop();\r\n    validationPath.byteLength_ -= stringLength(last);\r\n    // Un-count the previous '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ -= 1;\r\n    }\r\n}\r\nfunction validationPathCheckValid(validationPath) {\r\n    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'has a key path longer than ' +\r\n            MAX_PATH_LENGTH_BYTES +\r\n            ' bytes (' +\r\n            validationPath.byteLength_ +\r\n            ').');\r\n    }\r\n    if (validationPath.parts_.length > MAX_PATH_DEPTH) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'path specified exceeds the maximum depth that can be written (' +\r\n            MAX_PATH_DEPTH +\r\n            ') or object contains a cycle ' +\r\n            validationPathToErrorString(validationPath));\r\n    }\r\n}\r\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\r\nfunction validationPathToErrorString(validationPath) {\r\n    if (validationPath.parts_.length === 0) {\r\n        return '';\r\n    }\r\n    return \"in property '\" + validationPath.parts_.join('.') + \"'\";\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass VisibilityMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['visible']);\r\n        let hidden;\r\n        let visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, () => {\r\n                const visible = !document[hidden];\r\n                if (visible !== this.visible_) {\r\n                    this.visible_ = visible;\r\n                    this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new VisibilityMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RECONNECT_MIN_DELAY = 1000;\r\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\r\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nconst INVALID_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nclass PersistentConnection extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param applicationId_ - The Firebase App ID for this project\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.onConnectStatus_ = onConnectStatus_;\r\n        this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        this.log_ = logWrapper('p:' + this.id + ':');\r\n        this.interruptReasons_ = {};\r\n        this.listens = new Map();\r\n        this.outstandingPuts_ = [];\r\n        this.outstandingGets_ = [];\r\n        this.outstandingPutCount_ = 0;\r\n        this.outstandingGetCount_ = 0;\r\n        this.onDisconnectRequestQueue_ = [];\r\n        this.connected_ = false;\r\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        this.securityDebugCallback_ = null;\r\n        this.lastSessionId = null;\r\n        this.establishConnectionTimer_ = null;\r\n        this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        this.requestCBHash_ = {};\r\n        this.requestNumber_ = 0;\r\n        this.realtime_ = null;\r\n        this.authToken_ = null;\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = false;\r\n        this.invalidAuthTokenCount_ = 0;\r\n        this.invalidAppCheckTokenCount_ = 0;\r\n        this.firstConnection_ = true;\r\n        this.lastConnectionAttemptTime_ = null;\r\n        this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', this.onOnline_, this);\r\n        }\r\n    }\r\n    sendRequest(action, body, onResponse) {\r\n        const curReqNum = ++this.requestNumber_;\r\n        const msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(stringify(msg));\r\n        assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    }\r\n    get(query) {\r\n        this.initConnection_();\r\n        const deferred = new Deferred();\r\n        const request = {\r\n            p: query._path.toString(),\r\n            q: query._queryObject\r\n        };\r\n        const outstandingGet = {\r\n            action: 'g',\r\n            request,\r\n            onComplete: (message) => {\r\n                const payload = message['d'];\r\n                if (message['s'] === 'ok') {\r\n                    this.onDataUpdate_(request['p'], payload, \r\n                    /*isMerge*/ false, \r\n                    /*tag*/ null);\r\n                    deferred.resolve(payload);\r\n                }\r\n                else {\r\n                    deferred.reject(payload);\r\n                }\r\n            }\r\n        };\r\n        this.outstandingGets_.push(outstandingGet);\r\n        this.outstandingGetCount_++;\r\n        const index = this.outstandingGets_.length - 1;\r\n        if (!this.connected_) {\r\n            setTimeout(() => {\r\n                const get = this.outstandingGets_[index];\r\n                if (get === undefined || outstandingGet !== get) {\r\n                    return;\r\n                }\r\n                delete this.outstandingGets_[index];\r\n                this.outstandingGetCount_--;\r\n                if (this.outstandingGetCount_ === 0) {\r\n                    this.outstandingGets_ = [];\r\n                }\r\n                this.log_('get ' + index + ' timed out on connection');\r\n                deferred.reject(new Error('Client is offline.'));\r\n            }, GET_CONNECT_TIMEOUT);\r\n        }\r\n        if (this.connected_) {\r\n            this.sendGet_(index);\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        this.initConnection_();\r\n        const queryId = query._queryIdentifier;\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        if (!this.listens.has(pathString)) {\r\n            this.listens.set(pathString, new Map());\r\n        }\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\r\n        assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');\r\n        const listenSpec = {\r\n            onComplete,\r\n            hashFn: currentHashFn,\r\n            query,\r\n            tag\r\n        };\r\n        this.listens.get(pathString).set(queryId, listenSpec);\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    }\r\n    sendGet_(index) {\r\n        const get = this.outstandingGets_[index];\r\n        this.sendRequest('g', get.request, (message) => {\r\n            delete this.outstandingGets_[index];\r\n            this.outstandingGetCount_--;\r\n            if (this.outstandingGetCount_ === 0) {\r\n                this.outstandingGets_ = [];\r\n            }\r\n            if (get.onComplete) {\r\n                get.onComplete(message);\r\n            }\r\n        });\r\n    }\r\n    sendListen_(listenSpec) {\r\n        const query = listenSpec.query;\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query._queryObject;\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, (message) => {\r\n            const payload = message[ /*data*/'d'];\r\n            const status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            const currentListenSpec = this.listens.get(pathString) &&\r\n                this.listens.get(pathString).get(queryId);\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static warnOnListenWarnings_(payload, query) {\r\n        if (payload && typeof payload === 'object' && contains(payload, 'w')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const warnings = safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\r\n                const indexPath = query._path.toString();\r\n                warn(`Using an unspecified index. Your data will be downloaded and ` +\r\n                    `filtered on the client. Consider adding ${indexSpec} at ` +\r\n                    `${indexPath} to your security rules for better performance.`);\r\n            }\r\n        }\r\n    }\r\n    refreshAuthToken(token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, () => { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    }\r\n    reduceReconnectDelayIfAdminCredential_(credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        const isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    }\r\n    refreshAppCheckToken(token) {\r\n        this.appCheckToken_ = token;\r\n        this.log_('App check token refreshed');\r\n        if (this.appCheckToken_) {\r\n            this.tryAppCheck();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us.\r\n            //If we're not connected, simply delete the credential so we dont become\r\n            // authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unappeck', {}, () => { });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    tryAuth() {\r\n        if (this.connected_ && this.authToken_) {\r\n            const token = this.authToken_;\r\n            const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\r\n            const requestData = { cred: token };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (this.authToken_ === token) {\r\n                    if (status === 'ok') {\r\n                        this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given token. If the authentication\r\n     * attempt fails, it's triggered like the token was revoked (the connection is\r\n     * closed).\r\n     */\r\n    tryAppCheck() {\r\n        if (this.connected_ && this.appCheckToken_) {\r\n            this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (status === 'ok') {\r\n                    this.invalidAppCheckTokenCount_ = 0;\r\n                }\r\n                else {\r\n                    this.onAppCheckRevoked_(status, data);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    unlisten(query, tag) {\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\r\n        }\r\n    }\r\n    sendUnlisten_(pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    }\r\n    onDisconnectPut(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'o',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectMerge(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'om',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectCancel(pathString, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    sendOnDisconnect_(action, pathString, data, onComplete) {\r\n        const request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, (response) => {\r\n            if (onComplete) {\r\n                setTimeout(() => {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    }\r\n    put(pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    }\r\n    merge(pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    }\r\n    putInternal(action, pathString, data, onComplete, hash) {\r\n        this.initConnection_();\r\n        const request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined) {\r\n            request[ /*hash*/'h'] = hash;\r\n        }\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action,\r\n            request,\r\n            onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        const index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    }\r\n    sendPut_(index) {\r\n        const action = this.outstandingPuts_[index].action;\r\n        const request = this.outstandingPuts_[index].request;\r\n        const onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, (message) => {\r\n            this.log_(action + ' response', message);\r\n            delete this.outstandingPuts_[index];\r\n            this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (this.outstandingPutCount_ === 0) {\r\n                this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete) {\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n            }\r\n        });\r\n    }\r\n    reportStats(stats) {\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            const request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, result => {\r\n                const status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    const errorReason = result[ /* data */'d'];\r\n                    this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + stringify(message));\r\n            const reqNum = message['r'];\r\n            const onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    }\r\n    onDataPush_(action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        }\r\n        else if (action === 'm') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        }\r\n        else if (action === 'c') {\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        }\r\n        else if (action === 'ac') {\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'apc') {\r\n            this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'sd') {\r\n            this.onSecurityDebugPacket_(body);\r\n        }\r\n        else {\r\n            error('Unrecognized action received from server: ' +\r\n                stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n        }\r\n    }\r\n    onReady_(timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    }\r\n    scheduleConnect_(timeout) {\r\n        assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(() => {\r\n            this.establishConnectionTimer_ = null;\r\n            this.establishConnection_();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(timeout));\r\n    }\r\n    initConnection_() {\r\n        if (!this.realtime_ && this.firstConnection_) {\r\n            this.scheduleConnect_(0);\r\n        }\r\n    }\r\n    onVisible_(visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    }\r\n    onOnline_(online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    }\r\n    onRealtimeDisconnect_() {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                }\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    }\r\n    async establishConnection_() {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            const onDataMessage = this.onDataMessage_.bind(this);\r\n            const onReady = this.onReady_.bind(this);\r\n            const onDisconnect = this.onRealtimeDisconnect_.bind(this);\r\n            const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            const lastSessionId = this.lastSessionId;\r\n            let canceled = false;\r\n            let connection = null;\r\n            const closeFn = function () {\r\n                if (connection) {\r\n                    connection.close();\r\n                }\r\n                else {\r\n                    canceled = true;\r\n                    onDisconnect();\r\n                }\r\n            };\r\n            const sendRequestFn = function (msg) {\r\n                assert(connection, \"sendRequest call when we're not connected not allowed.\");\r\n                connection.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            const forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            try {\r\n                // First fetch auth and app check token, and establish connection after\r\n                // fetching the token was successful\r\n                const [authToken, appCheckToken] = await Promise.all([\r\n                    this.authTokenProvider_.getToken(forceRefresh),\r\n                    this.appCheckTokenProvider_.getToken(forceRefresh)\r\n                ]);\r\n                if (!canceled) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    this.authToken_ = authToken && authToken.accessToken;\r\n                    this.appCheckToken_ = appCheckToken && appCheckToken.token;\r\n                    connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, \r\n                    /* onKill= */ reason => {\r\n                        warn(reason + ' (' + this.repoInfo_.toString() + ')');\r\n                        this.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.log_('Failed to get token: ' + error);\r\n                if (!canceled) {\r\n                    if (this.repoInfo_.nodeAdmin) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error);\r\n                    }\r\n                    closeFn();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    interrupt(reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    }\r\n    resume(reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    }\r\n    handleTimestamp_(timestamp) {\r\n        const delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    }\r\n    cancelSentTransactions_() {\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            const put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete) {\r\n                    put.onComplete('disconnect');\r\n                }\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0) {\r\n            this.outstandingPuts_ = [];\r\n        }\r\n    }\r\n    onListenRevoked_(pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        let queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\r\n        }\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete) {\r\n            listen.onComplete('permission_denied');\r\n        }\r\n    }\r\n    removeListen_(pathString, queryId) {\r\n        const normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        let listen;\r\n        if (this.listens.has(normalizedPathString)) {\r\n            const map = this.listens.get(normalizedPathString);\r\n            listen = map.get(queryId);\r\n            map.delete(queryId);\r\n            if (map.size === 0) {\r\n                this.listens.delete(normalizedPathString);\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    }\r\n    onAuthRevoked_(statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onAppCheckRevoked_(statusCode, explanation) {\r\n        log('App check token revoked: ' + statusCode + '/' + explanation);\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        // Note: We don't close the connection as the developer may not have\r\n        // enforcement enabled. The backend closes connections with enforcements.\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAppCheckTokenCount_++;\r\n            if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                this.appCheckTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onSecurityDebugPacket_(body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    }\r\n    restoreState_() {\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        this.tryAppCheck();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        for (const queries of this.listens.values()) {\r\n            for (const listenSpec of queries.values()) {\r\n                this.sendListen_(listenSpec);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i]) {\r\n                this.sendPut_(i);\r\n            }\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            const request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n        for (let i = 0; i < this.outstandingGets_.length; i++) {\r\n            if (this.outstandingGets_[i]) {\r\n                this.sendGet_(i);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sends client stats for first connection\r\n     */\r\n    sendConnectStats_() {\r\n        const stats = {};\r\n        let clientName = 'js';\r\n        if (isNodeSdk()) {\r\n            if (this.repoInfo_.nodeAdmin) {\r\n                clientName = 'admin_node';\r\n            }\r\n            else {\r\n                clientName = 'node';\r\n            }\r\n        }\r\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    }\r\n    shouldReconnect_() {\r\n        const online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return isEmpty(this.interruptReasons_) && online;\r\n    }\r\n}\r\nPersistentConnection.nextPersistentConnectionId_ = 0;\r\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\r\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass NamedNode {\r\n    constructor(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    static Wrap(name, node) {\r\n        return new NamedNode(name, node);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Index {\r\n    /**\r\n     * @returns A standalone comparison function for\r\n     * this index\r\n     */\r\n    getCompare() {\r\n        return this.compare.bind(this);\r\n    }\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     *\r\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    indexedValueChanged(oldNode, newNode) {\r\n        const oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        const newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    }\r\n    /**\r\n     * @returns a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __EMPTY_NODE;\r\nclass KeyIndex extends Index {\r\n    static get __EMPTY_NODE() {\r\n        return __EMPTY_NODE;\r\n    }\r\n    static set __EMPTY_NODE(val) {\r\n        __EMPTY_NODE = val;\r\n    }\r\n    compare(a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    }\r\n    isDefinedOn(node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    }\r\n    makePost(indexValue, name) {\r\n        assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.key';\r\n    }\r\n}\r\nconst KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nclass SortedMapIterator {\r\n    /**\r\n     * @param node - Node to iterate.\r\n     * @param isReverse_ - Whether or not to iterate in reverse\r\n     */\r\n    constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        this.nodeStack_ = [];\r\n        let cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_) {\r\n                cmp *= -1;\r\n            }\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getNext() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        let node = this.nodeStack_.pop();\r\n        let result;\r\n        if (this.resultGenerator_) {\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            result = { key: node.key, value: node.value };\r\n        }\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    hasNext() {\r\n        return this.nodeStack_.length > 0;\r\n    }\r\n    peek() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        const node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    }\r\n}\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nclass LLRBNode {\r\n    /**\r\n     * @param key - Key associated with this node.\r\n     * @param value - Value associated with this node.\r\n     * @param color - Whether this node is red.\r\n     * @param left - Left child.\r\n     * @param right - Right child.\r\n     */\r\n    constructor(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param key - New key for the node, or null.\r\n     * @param value - New value for the node, or null.\r\n     * @param color - New color for the node, or null.\r\n     * @param left - New left child for the node, or null.\r\n     * @param right - New right child for the node, or null.\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return this.left.count() + 1 + this.right.count();\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            !!action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    }\r\n    /**\r\n     * @returns The minimum node in the tree.\r\n     */\r\n    min_() {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    minKey() {\r\n        return this.min_().key;\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    maxKey() {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    }\r\n    /**\r\n     * @param key - Key to insert.\r\n     * @param value - Value to insert.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the key/value added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        let n = this;\r\n        const cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns New tree, with the minimum key removed.\r\n     */\r\n    removeMin_() {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        let n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\r\n            n = n.moveRedLeft_();\r\n        }\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @param key - The key of the item to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the specified item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        let n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_()) {\r\n                n = n.rotateRight_();\r\n            }\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns Whether this is a RED node.\r\n     */\r\n    isRed_() {\r\n        return this.color;\r\n    }\r\n    /**\r\n     * @returns New tree after performing any needed rotations.\r\n     */\r\n    fixUp_() {\r\n        let n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_()) {\r\n            n = n.rotateLeft_();\r\n        }\r\n        if (n.left.isRed_() && n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n        }\r\n        if (n.left.isRed_() && n.right.isRed_()) {\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedLeft.\r\n     */\r\n    moveRedLeft_() {\r\n        let n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedRight.\r\n     */\r\n    moveRedRight_() {\r\n        let n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateLeft.\r\n     */\r\n    rotateLeft_() {\r\n        const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateRight.\r\n     */\r\n    rotateRight_() {\r\n        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    }\r\n    /**\r\n     * @returns Newt ree, after colorFlip.\r\n     */\r\n    colorFlip_() {\r\n        const left = this.left.copy(null, null, !this.left.color, null, null);\r\n        const right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    }\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @returns True if all is well.\r\n     */\r\n    checkMaxDepth_() {\r\n        const blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    }\r\n    check_() {\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        const blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    }\r\n}\r\nLLRBNode.RED = true;\r\nLLRBNode.BLACK = false;\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nclass LLRBEmptyNode {\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        return this;\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    inorderTraversal(action) {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return false;\r\n    }\r\n    minKey() {\r\n        return null;\r\n    }\r\n    maxKey() {\r\n        return null;\r\n    }\r\n    check_() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns Whether this node is red.\r\n     */\r\n    isRed_() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nclass SortedMap {\r\n    /**\r\n     * @param comparator_ - Key comparator.\r\n     * @param root_ - Optional root node for the map.\r\n     */\r\n    constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @returns New map, with item added.\r\n     */\r\n    insert(key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @returns New map, with item removed.\r\n     */\r\n    remove(key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param key - The key to look up.\r\n     * @returns The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    get(key) {\r\n        let cmp;\r\n        let node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param key - The key to find the predecessor of\r\n     * @returns The predecessor key.\r\n     */\r\n    getPredecessorKey(key) {\r\n        let cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty()) {\r\n                        node = node.right;\r\n                    }\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    }\r\n    /**\r\n     * @returns True if the map is empty.\r\n     */\r\n    isEmpty() {\r\n        return this.root_.isEmpty();\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the map.\r\n     */\r\n    count() {\r\n        return this.root_.count();\r\n    }\r\n    /**\r\n     * @returns The minimum key in the map.\r\n     */\r\n    minKey() {\r\n        return this.root_.minKey();\r\n    }\r\n    /**\r\n     * @returns The maximum key in the map.\r\n     */\r\n    maxKey() {\r\n        return this.root_.maxKey();\r\n    }\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return this.root_.inorderTraversal(action);\r\n    }\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns True if the traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return this.root_.reverseTraversal(action);\r\n    }\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @returns The iterator.\r\n     */\r\n    getIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    }\r\n    getIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    }\r\n    getReverseIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    }\r\n    getReverseIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    }\r\n}\r\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\r\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet MAX_NODE$2;\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$2 = val;\r\n}\r\nconst priorityHashText = function (priority) {\r\n    if (typeof priority === 'number') {\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    }\r\n    else {\r\n        return 'string:' + priority;\r\n    }\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\r\nconst validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        const val = priorityNode.val();\r\n        assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nclass LeafNode {\r\n    /**\r\n     * @param value_ - The value to store in this leaf node. The object type is\r\n     * possible in the event of a deferred value\r\n     * @param priorityNode_ - The priority of this node.\r\n     */\r\n    constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    static set __childrenNodeConstructor(val) {\r\n        __childrenNodeConstructor = val;\r\n    }\r\n    static get __childrenNodeConstructor() {\r\n        return __childrenNodeConstructor;\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return true;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this;\r\n        }\r\n        else if (pathGetFront(path) === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    hasChild() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode) {\r\n        return null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return 0;\r\n    }\r\n    /** @inheritDoc */\r\n    forEachChild(index, action) {\r\n        return false;\r\n    }\r\n    val(exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty()) {\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        }\r\n        else {\r\n            return this.getValue();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.priorityNode_.isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            }\r\n            const type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @returns The value of the node.\r\n     */\r\n    getValue() {\r\n        return this.value_;\r\n    }\r\n    compareTo(other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    }\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     */\r\n    compareToLeafNode_(otherLeaf) {\r\n        const otherLeafType = typeof otherLeaf.value_;\r\n        const thisLeafType = typeof this.value_;\r\n        const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    }\r\n    withIndex() {\r\n        return this;\r\n    }\r\n    isIndexed() {\r\n        return true;\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            const otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\r\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet nodeFromJSON$1;\r\nlet MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON$1 = val;\r\n}\r\nfunction setMaxNode(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\nclass PriorityIndex extends Index {\r\n    compare(a, b) {\r\n        const aPriority = a.node.getPriority();\r\n        const bPriority = b.node.getPriority();\r\n        const indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getPriority().isEmpty();\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    }\r\n    makePost(indexValue, name) {\r\n        const priorityNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.priority';\r\n    }\r\n}\r\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_2 = Math.log(2);\r\nclass Base12Num {\r\n    constructor(length) {\r\n        const logBase2 = (num) => \r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        parseInt((Math.log(num) / LOG_2), 10);\r\n        const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        const mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    nextBitIsOne() {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        const result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\r\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    const buildBalancedTree = function (low, high) {\r\n        const length = high - low;\r\n        let namedNode;\r\n        let key;\r\n        if (length === 0) {\r\n            return null;\r\n        }\r\n        else if (length === 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const middle = parseInt((length / 2), 10) + low;\r\n            const left = buildBalancedTree(low, middle);\r\n            const right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    const buildFrom12Array = function (base12) {\r\n        let node = null;\r\n        let root = null;\r\n        let index = childList.length;\r\n        const buildPennant = function (chunkSize, color) {\r\n            const low = index - chunkSize;\r\n            const high = index;\r\n            index -= chunkSize;\r\n            const childTree = buildBalancedTree(low + 1, high);\r\n            const namedNode = childList[low];\r\n            const key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        const attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (let i = 0; i < base12.count; ++i) {\r\n            const isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            const chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    const base12 = new Base12Num(childList.length);\r\n    const root = buildFrom12Array(base12);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet _defaultIndexMap;\r\nconst fallbackObject = {};\r\nclass IndexMap {\r\n    constructor(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\r\n    static get Default() {\r\n        assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n        _defaultIndexMap =\r\n            _defaultIndexMap ||\r\n                new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n        return _defaultIndexMap;\r\n    }\r\n    get(indexKey) {\r\n        const sortedMap = safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap) {\r\n            throw new Error('No index defined for ' + indexKey);\r\n        }\r\n        if (sortedMap instanceof SortedMap) {\r\n            return sortedMap;\r\n        }\r\n        else {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n    }\r\n    hasIndex(indexDefinition) {\r\n        return contains(this.indexSet_, indexDefinition.toString());\r\n    }\r\n    addIndex(indexDefinition, existingChildren) {\r\n        assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        const childList = [];\r\n        let sawIndexedValue = false;\r\n        const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        let next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        let newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        const indexName = indexDefinition.toString();\r\n        const newIndexSet = Object.assign({}, this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        const newIndexes = Object.assign({}, this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    }\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */\r\n    addToIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\r\n            const index = safeGet(this.indexSet_, indexName);\r\n            assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    const childList = [];\r\n                    const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    let next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name !== namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                let newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */\r\n    removeFromIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren) => {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nlet EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\r\nclass ChildrenNode {\r\n    /**\r\n     * @param children_ - List of children of this node..\r\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n     */\r\n    constructor(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    static get EMPTY_NODE() {\r\n        return (EMPTY_NODE ||\r\n            (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            const child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return this;\r\n        }\r\n        return this.getImmediateChild(front).getChild(pathPopFront(path));\r\n    }\r\n    /** @inheritDoc */\r\n    hasChild(childName) {\r\n        return this.children_.get(childName) !== null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            const namedNode = new NamedNode(childName, newChildNode);\r\n            let newChildren, newIndexMap;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            const newPriority = newChildren.isEmpty()\r\n                ? EMPTY_NODE\r\n                : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return this.children_.isEmpty();\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return this.children_.count();\r\n    }\r\n    /** @inheritDoc */\r\n    val(exportFormat) {\r\n        if (this.isEmpty()) {\r\n            return null;\r\n        }\r\n        const obj = {};\r\n        let numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            const array = [];\r\n            // eslint-disable-next-line guard-for-in\r\n            for (const key in obj) {\r\n                array[key] = obj[key];\r\n            }\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.getPriority().isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            }\r\n            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                const childHash = childNode.hash();\r\n                if (childHash !== '') {\r\n                    toHash += ':' + key + ':' + childHash;\r\n                }\r\n            });\r\n            this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode, index) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    }\r\n    getFirstChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    }\r\n    getFirstChild(indexDefinition) {\r\n        const minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     */\r\n    getLastChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    }\r\n    getLastChild(indexDefinition) {\r\n        const maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    forEachChild(index, action) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(wrappedNode => {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    }\r\n    getIterator(indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    }\r\n    getIteratorFrom(startPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, key => key);\r\n        }\r\n        else {\r\n            const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    getReverseIterator(indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    }\r\n    getReverseIteratorFrom(endPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, key => {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    compareTo(other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    }\r\n    withIndex(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    }\r\n    isIndexed(index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            const otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                const thisIter = this.getIterator(PRIORITY_INDEX);\r\n                const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                let thisCurrent = thisIter.getNext();\r\n                let otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     */\r\n    resolveIndex_(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    }\r\n}\r\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\nclass MaxNode extends ChildrenNode {\r\n    constructor() {\r\n        super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\r\n    }\r\n    compareTo(other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n    equals(other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    }\r\n    getPriority() {\r\n        return this;\r\n    }\r\n    getImmediateChild(childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\r\nconst MAX_NODE = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode$1(MAX_NODE);\r\nsetMaxNode(MAX_NODE);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\r\nfunction nodeFromJSON(json, priority = null) {\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        const jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        const children = [];\r\n        let childrenHavePriority = false;\r\n        const hinzeJsonObj = json;\r\n        each(hinzeJsonObj, (key, child) => {\r\n            if (key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                const childNode = nodeFromJSON(child);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority =\r\n                        childrenHavePriority || !childNode.getPriority().isEmpty();\r\n                    children.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children.length === 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\r\n        if (childrenHavePriority) {\r\n            const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        let node = ChildrenNode.EMPTY_NODE;\r\n        each(json, (key, childData) => {\r\n            if (contains(json, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    const childNode = nodeFromJSON(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\r\n                        node = node.updateImmediateChild(key, childNode);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return node.updatePriority(nodeFromJSON(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PathIndex extends Index {\r\n    constructor(indexPath_) {\r\n        super();\r\n        this.indexPath_ = indexPath_;\r\n        assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n    }\r\n    extractChild(snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    }\r\n    compare(a, b) {\r\n        const aChild = this.extractChild(a.node);\r\n        const bChild = this.extractChild(b.node);\r\n        const indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    }\r\n    maxPost() {\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\r\n        return new NamedNode(MAX_NAME, node);\r\n    }\r\n    toString() {\r\n        return pathSlice(this.indexPath_, 0).join('/');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ValueIndex extends Index {\r\n    compare(a, b) {\r\n        const indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return true;\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MAX;\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.value';\r\n    }\r\n}\r\nconst VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Modeled after base64 web-safe chars, but ordered by ASCII.\r\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\nconst MIN_PUSH_CHAR = '-';\r\nconst MAX_PUSH_CHAR = 'z';\r\nconst MAX_KEY_LEN = 786;\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nconst nextPushId = (function () {\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    let lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    const lastRandChars = [];\r\n    return function (now) {\r\n        const duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        let i;\r\n        const timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        assert(now === 0, 'Cannot push at time == 0');\r\n        let id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\r\nconst successor = function (key) {\r\n    if (key === '' + INTEGER_32_MAX) {\r\n        // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\r\n        return MIN_PUSH_CHAR;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt + 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    if (next.length < MAX_KEY_LEN) {\r\n        next.push(MIN_PUSH_CHAR);\r\n        return next.join('');\r\n    }\r\n    let i = next.length - 1;\r\n    while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\r\n        i--;\r\n    }\r\n    // `successor` was called on the largest possible key, so return the\r\n    // MAX_NAME, which sorts larger than all keys.\r\n    if (i === -1) {\r\n        return MAX_NAME;\r\n    }\r\n    const source = next[i];\r\n    const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\r\n    next[i] = sourcePlusOne;\r\n    return next.slice(0, i + 1).join('');\r\n};\r\n// `key` is assumed to be non-empty.\r\nconst predecessor = function (key) {\r\n    if (key === '' + INTEGER_32_MIN) {\r\n        return MIN_NAME;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt - 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\r\n    // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\r\n    // than that, `predecessor(predecessor(key))`, is\r\n    //\r\n    // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\r\n    //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\r\n    //\r\n    // analogous to increment/decrement for base-10 integers.\r\n    //\r\n    // This works because lexigographic comparison works character-by-character,\r\n    // using length as a tie-breaker if one key is a prefix of the other.\r\n    if (next[next.length - 1] === MIN_PUSH_CHAR) {\r\n        if (next.length === 1) {\r\n            // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\r\n            return '' + INTEGER_32_MAX;\r\n        }\r\n        delete next[next.length - 1];\r\n        return next.join('');\r\n    }\r\n    // Replace the last character with it's immediate predecessor, and\r\n    // fill the suffix of the key with MAX_PUSH_CHAR. This is the\r\n    // lexicographically largest possible key smaller than `key`.\r\n    next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);\r\n    return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction changeValue(snapshotNode) {\r\n    return { type: \"value\" /* VALUE */, snapshotNode };\r\n}\r\nfunction changeChildAdded(childName, snapshotNode) {\r\n    return { type: \"child_added\" /* CHILD_ADDED */, snapshotNode, childName };\r\n}\r\nfunction changeChildRemoved(childName, snapshotNode) {\r\n    return { type: \"child_removed\" /* CHILD_REMOVED */, snapshotNode, childName };\r\n}\r\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\r\n    return {\r\n        type: \"child_changed\" /* CHILD_CHANGED */,\r\n        snapshotNode,\r\n        childName,\r\n        oldSnap\r\n    };\r\n}\r\nfunction changeChildMoved(childName, snapshotNode) {\r\n    return { type: \"child_moved\" /* CHILD_MOVED */, snapshotNode, childName };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\r\nclass IndexedFilter {\r\n    constructor(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        const oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\r\n                }\r\n                else {\r\n                    assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        const oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    }\r\n    filtersNodes() {\r\n        return false;\r\n    }\r\n    getIndexedFilter() {\r\n        return this;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\r\nclass RangedFilter {\r\n    constructor(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n    }\r\n    getStartPost() {\r\n        return this.startPost_;\r\n    }\r\n    getEndPost() {\r\n        return this.endPost_;\r\n    }\r\n    matches(node) {\r\n        return (this.index_.compare(this.getStartPost(), node) <= 0 &&\r\n            this.index_.compare(node, this.getEndPost()) <= 0);\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        let filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        const self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.indexedFilter_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    static getStartPost_(params) {\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    }\r\n    static getEndPost_(params) {\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\r\nclass LimitedFilter {\r\n    constructor(params) {\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        let filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    const next = iterator.getNext();\r\n                    let inRange;\r\n                    if (this.reverse_) {\r\n                        inRange =\r\n                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\r\n                    }\r\n                    else {\r\n                        inRange =\r\n                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\r\n                    }\r\n                    if (inRange) {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        // if we have reached the end post, we cannot keep adding elemments\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                let startPost;\r\n                let endPost;\r\n                let cmp;\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getEndPost();\r\n                    endPost = this.rangedFilter_.getStartPost();\r\n                    const indexCompare = this.index_.getCompare();\r\n                    cmp = (a, b) => indexCompare(b, a);\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getStartPost();\r\n                    endPost = this.rangedFilter_.getEndPost();\r\n                    cmp = this.index_.getCompare();\r\n                }\r\n                let count = 0;\r\n                let foundStartPost = false;\r\n                while (iterator.hasNext()) {\r\n                    const next = iterator.getNext();\r\n                    if (!foundStartPost && cmp(startPost, next) <= 0) {\r\n                        // start adding\r\n                        foundStartPost = true;\r\n                    }\r\n                    const inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        let cmp;\r\n        if (this.reverse_) {\r\n            const indexCmp = this.index_.getCompare();\r\n            cmp = (a, b) => indexCmp(b, a);\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        const oldEventCache = snap;\r\n        assert(oldEventCache.numChildren() === this.limit_, '');\r\n        const newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        const windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        const inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            const oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\r\n                }\r\n                const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\r\nclass QueryParams {\r\n    constructor() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.startAfterSet_ = false;\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.endBeforeSet_ = false;\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    hasStart() {\r\n        return this.startSet_;\r\n    }\r\n    hasStartAfter() {\r\n        return this.startAfterSet_;\r\n    }\r\n    hasEndBefore() {\r\n        return this.endBeforeSet_;\r\n    }\r\n    /**\r\n     * @returns True if it would return from left.\r\n     */\r\n    isViewFromLeft() {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return this.viewFrom_ === \"l\" /* VIEW_FROM_LEFT */;\r\n        }\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     */\r\n    getIndexStartValue() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     */\r\n    getIndexStartName() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    }\r\n    hasEnd() {\r\n        return this.endSet_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     */\r\n    getIndexEndValue() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     */\r\n    getIndexEndName() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    }\r\n    hasLimit() {\r\n        return this.limitSet_;\r\n    }\r\n    /**\r\n     * @returns True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    hasAnchoredLimit() {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    }\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     */\r\n    getLimit() {\r\n        assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    loadsAllData() {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    }\r\n    isDefault() {\r\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\r\n    }\r\n    copy() {\r\n        const copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    }\r\n}\r\nfunction queryParamsGetNodeFilter(queryParams) {\r\n    if (queryParams.loadsAllData()) {\r\n        return new IndexedFilter(queryParams.getIndex());\r\n    }\r\n    else if (queryParams.hasLimit()) {\r\n        return new LimitedFilter(queryParams);\r\n    }\r\n    else {\r\n        return new RangedFilter(queryParams);\r\n    }\r\n}\r\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"l\" /* VIEW_FROM_LEFT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsLimitToLast(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"r\" /* VIEW_FROM_RIGHT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.startSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexStartValue_ = indexValue;\r\n    if (key != null) {\r\n        newParams.startNameSet_ = true;\r\n        newParams.indexStartName_ = key;\r\n    }\r\n    else {\r\n        newParams.startNameSet_ = false;\r\n        newParams.indexStartName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = successor(indexValue);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        let childKey;\r\n        if (key == null) {\r\n            childKey = MAX_NAME;\r\n        }\r\n        else {\r\n            childKey = successor(key);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.startAfterSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsEndAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.endSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexEndValue_ = indexValue;\r\n    if (key !== undefined) {\r\n        newParams.endNameSet_ = true;\r\n        newParams.indexEndName_ = key;\r\n    }\r\n    else {\r\n        newParams.endNameSet_ = false;\r\n        newParams.indexEndName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\r\n    let childKey;\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = predecessor(indexValue);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        if (key == null) {\r\n            childKey = MIN_NAME;\r\n        }\r\n        else {\r\n            childKey = predecessor(key);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.endBeforeSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsOrderBy(queryParams, index) {\r\n    const newParams = queryParams.copy();\r\n    newParams.index_ = index;\r\n    return newParams;\r\n}\r\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\r\nfunction queryParamsToRestQueryStringParameters(queryParams) {\r\n    const qs = {};\r\n    if (queryParams.isDefault()) {\r\n        return qs;\r\n    }\r\n    let orderBy;\r\n    if (queryParams.index_ === PRIORITY_INDEX) {\r\n        orderBy = \"$priority\" /* PRIORITY_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === VALUE_INDEX) {\r\n        orderBy = \"$value\" /* VALUE_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === KEY_INDEX) {\r\n        orderBy = \"$key\" /* KEY_INDEX */;\r\n    }\r\n    else {\r\n        assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n        orderBy = queryParams.index_.toString();\r\n    }\r\n    qs[\"orderBy\" /* ORDER_BY */] = stringify(orderBy);\r\n    if (queryParams.startSet_) {\r\n        qs[\"startAt\" /* START_AT */] = stringify(queryParams.indexStartValue_);\r\n        if (queryParams.startNameSet_) {\r\n            qs[\"startAt\" /* START_AT */] +=\r\n                ',' + stringify(queryParams.indexStartName_);\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        qs[\"endAt\" /* END_AT */] = stringify(queryParams.indexEndValue_);\r\n        if (queryParams.endNameSet_) {\r\n            qs[\"endAt\" /* END_AT */] +=\r\n                ',' + stringify(queryParams.indexEndName_);\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        if (queryParams.isViewFromLeft()) {\r\n            qs[\"limitToFirst\" /* LIMIT_TO_FIRST */] = queryParams.limit_;\r\n        }\r\n        else {\r\n            qs[\"limitToLast\" /* LIMIT_TO_LAST */] = queryParams.limit_;\r\n        }\r\n    }\r\n    return qs;\r\n}\r\nfunction queryParamsGetQueryObject(queryParams) {\r\n    const obj = {};\r\n    if (queryParams.startSet_) {\r\n        obj[\"sp\" /* INDEX_START_VALUE */] =\r\n            queryParams.indexStartValue_;\r\n        if (queryParams.startNameSet_) {\r\n            obj[\"sn\" /* INDEX_START_NAME */] =\r\n                queryParams.indexStartName_;\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        obj[\"ep\" /* INDEX_END_VALUE */] = queryParams.indexEndValue_;\r\n        if (queryParams.endNameSet_) {\r\n            obj[\"en\" /* INDEX_END_NAME */] = queryParams.indexEndName_;\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        obj[\"l\" /* LIMIT */] = queryParams.limit_;\r\n        let viewFrom = queryParams.viewFrom_;\r\n        if (viewFrom === '') {\r\n            if (queryParams.isViewFromLeft()) {\r\n                viewFrom = \"l\" /* VIEW_FROM_LEFT */;\r\n            }\r\n            else {\r\n                viewFrom = \"r\" /* VIEW_FROM_RIGHT */;\r\n            }\r\n        }\r\n        obj[\"vf\" /* VIEW_FROM */] = viewFrom;\r\n    }\r\n    // For now, priority index is the default, so we only specify if it's some other index\r\n    if (queryParams.index_ !== PRIORITY_INDEX) {\r\n        obj[\"i\" /* INDEX */] = queryParams.index_.toString();\r\n    }\r\n    return obj;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nclass ReadonlyRestClient extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         */\r\n        this.listens_ = {};\r\n    }\r\n    reportStats(stats) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    static getListenId_(query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query._path.toString();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\r\n        // Mark this listener so we can tell if it's removed.\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        const thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (safeGet(this.listens_, listenId) === thisListen) {\r\n                let status;\r\n                if (!error) {\r\n                    status = 'ok';\r\n                }\r\n                else if (error === 401) {\r\n                    status = 'permission_denied';\r\n                }\r\n                else {\r\n                    status = 'rest_error:' + error;\r\n                }\r\n                onComplete(status, null);\r\n            }\r\n        });\r\n    }\r\n    /** @inheritDoc */\r\n    unlisten(query, tag) {\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    }\r\n    get(query) {\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        const pathString = query._path.toString();\r\n        const deferred = new Deferred();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, \r\n                /*isMerge=*/ false, \r\n                /*tag=*/ null);\r\n                deferred.resolve(data);\r\n            }\r\n            else {\r\n                deferred.reject(new Error(data));\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n    /** @inheritDoc */\r\n    refreshAuthToken(token) {\r\n        // no-op since we just always call getToken.\r\n    }\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     */\r\n    restRequest_(pathString, queryStringParameters = {}, callback) {\r\n        queryStringParameters['format'] = 'export';\r\n        return Promise.all([\r\n            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\r\n            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            if (authToken && authToken.accessToken) {\r\n                queryStringParameters['auth'] = authToken.accessToken;\r\n            }\r\n            if (appCheckToken && appCheckToken.token) {\r\n                queryStringParameters['ac'] = appCheckToken.token;\r\n            }\r\n            const url = (this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                this.repoInfo_.namespace +\r\n                querystring(queryStringParameters);\r\n            this.log_('Sending REST request for ' + url);\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = () => {\r\n                if (callback && xhr.readyState === 4) {\r\n                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    let res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\r\nclass SnapshotHolder {\r\n    constructor() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    getNode(path) {\r\n        return this.rootNode_.getChild(path);\r\n    }\r\n    updateSnapshot(path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newSparseSnapshotTree() {\r\n    return {\r\n        value: null,\r\n        children: new Map()\r\n    };\r\n}\r\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\r\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = data;\r\n        sparseSnapshotTree.children.clear();\r\n    }\r\n    else if (sparseSnapshotTree.value !== null) {\r\n        sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(path);\r\n        if (!sparseSnapshotTree.children.has(childKey)) {\r\n            sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\r\n        }\r\n        const child = sparseSnapshotTree.children.get(childKey);\r\n        path = pathPopFront(path);\r\n        sparseSnapshotTreeRemember(child, path, data);\r\n    }\r\n}\r\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\r\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = null;\r\n        sparseSnapshotTree.children.clear();\r\n        return true;\r\n    }\r\n    else {\r\n        if (sparseSnapshotTree.value !== null) {\r\n            if (sparseSnapshotTree.value.isLeafNode()) {\r\n                // We're trying to forget a node that doesn't exist\r\n                return false;\r\n            }\r\n            else {\r\n                const value = sparseSnapshotTree.value;\r\n                sparseSnapshotTree.value = null;\r\n                value.forEachChild(PRIORITY_INDEX, (key, tree) => {\r\n                    sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\r\n                });\r\n                return sparseSnapshotTreeForget(sparseSnapshotTree, path);\r\n            }\r\n        }\r\n        else if (sparseSnapshotTree.children.size > 0) {\r\n            const childKey = pathGetFront(path);\r\n            path = pathPopFront(path);\r\n            if (sparseSnapshotTree.children.has(childKey)) {\r\n                const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\r\n                if (safeToRemove) {\r\n                    sparseSnapshotTree.children.delete(childKey);\r\n                }\r\n            }\r\n            return sparseSnapshotTree.children.size === 0;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\r\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\r\n    if (sparseSnapshotTree.value !== null) {\r\n        func(prefixPath, sparseSnapshotTree.value);\r\n    }\r\n    else {\r\n        sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\r\n            const path = new Path(prefixPath.toString() + '/' + key);\r\n            sparseSnapshotTreeForEachTree(tree, path, func);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\r\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\r\n    sparseSnapshotTree.children.forEach((tree, key) => {\r\n        func(key, tree);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\r\nclass StatsListener {\r\n    constructor(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    get() {\r\n        const newStats = this.collection_.get();\r\n        const delta = Object.assign({}, newStats);\r\n        if (this.last_) {\r\n            each(this.last_, (stat, value) => {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\r\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\nclass StatsReporter {\r\n    constructor(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        const timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    reportStats_() {\r\n        const stats = this.statsListener_.get();\r\n        const reportedStats = {};\r\n        let haveStatsToReport = false;\r\n        each(stats, (stat, value) => {\r\n            if (value > 0 && contains(this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\nfunction newOperationSourceUser() {\r\n    return {\r\n        fromUser: true,\r\n        fromServer: false,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServer() {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServerTaggedQuery(queryId) {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId,\r\n        tagged: true\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AckUserWrite {\r\n    /**\r\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n     */\r\n    constructor(\r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ affectedTree, \r\n    /** @inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = newOperationSourceUser();\r\n    }\r\n    operationForChild(childName) {\r\n        if (!pathIsEmpty(this.path)) {\r\n            assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            const childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(newEmptyPath(), childTree, this.revert);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ListenComplete {\r\n    constructor(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new ListenComplete(this.source, newEmptyPath());\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, pathPopFront(this.path));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Overwrite {\r\n    constructor(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, pathPopFront(this.path), this.snap);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Merge {\r\n    constructor(\r\n    /** @inheritDoc */ source, \r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            const childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, newEmptyPath(), childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, newEmptyPath(), childTree);\r\n            }\r\n        }\r\n        else {\r\n            assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, pathPopFront(this.path), this.children);\r\n        }\r\n    }\r\n    toString() {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nclass CacheNode {\r\n    constructor(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     */\r\n    isFullyInitialized() {\r\n        return this.fullyInitialized_;\r\n    }\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     */\r\n    isFiltered() {\r\n        return this.filtered_;\r\n    }\r\n    isCompleteForPath(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        const childKey = pathGetFront(path);\r\n        return this.isCompleteForChild(childKey);\r\n    }\r\n    isCompleteForChild(key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    }\r\n    getNode() {\r\n        return this.node_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\r\nclass EventGenerator {\r\n    constructor(query_) {\r\n        this.query_ = query_;\r\n        this.index_ = this.query_._queryParams.getIndex();\r\n    }\r\n}\r\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\r\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\r\n    const events = [];\r\n    const moves = [];\r\n    changes.forEach(change => {\r\n        if (change.type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n            eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n            moves.push(changeChildMoved(change.childName, change.snapshotNode));\r\n        }\r\n    });\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* CHILD_REMOVED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* CHILD_ADDED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* CHILD_MOVED */, moves, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* CHILD_CHANGED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* VALUE */, changes, eventRegistrations, eventCache);\r\n    return events;\r\n}\r\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\r\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\r\n    const filteredChanges = changes.filter(change => change.type === eventType);\r\n    filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\r\n    filteredChanges.forEach(change => {\r\n        const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\r\n        registrations.forEach(registration => {\r\n            if (registration.respondsTo(change.type)) {\r\n                events.push(registration.createEvent(materializedChange, eventGenerator.query_));\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\r\n    if (change.type === 'value' || change.type === 'child_removed') {\r\n        return change;\r\n    }\r\n    else {\r\n        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\r\n        return change;\r\n    }\r\n}\r\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\r\n    if (a.childName == null || b.childName == null) {\r\n        throw assertionError('Should only compare child_ events.');\r\n    }\r\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n    return eventGenerator.index_.compare(aWrapped, bWrapped);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewCache(eventCache, serverCache) {\r\n    return { eventCache, serverCache };\r\n}\r\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\r\n    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\r\n}\r\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\r\n    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\r\n}\r\nfunction viewCacheGetCompleteEventSnap(viewCache) {\r\n    return viewCache.eventCache.isFullyInitialized()\r\n        ? viewCache.eventCache.getNode()\r\n        : null;\r\n}\r\nfunction viewCacheGetCompleteServerSnap(viewCache) {\r\n    return viewCache.serverCache.isFullyInitialized()\r\n        ? viewCache.serverCache.getNode()\r\n        : null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\r\nconst EmptyChildren = () => {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nclass ImmutableTree {\r\n    constructor(value, children = EmptyChildren()) {\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    static fromObject(obj) {\r\n        let tree = new ImmutableTree(null);\r\n        each(obj, (childPath, childSnap) => {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    }\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     */\r\n    isEmpty() {\r\n        return this.value === null && this.children.isEmpty();\r\n    }\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param relativePath - The remainder of the path\r\n     * @param predicate - The predicate to satisfy to return a node\r\n     */\r\n    findRootMostMatchingPathAndValue(relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: newEmptyPath(), value: this.value };\r\n        }\r\n        else {\r\n            if (pathIsEmpty(relativePath)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(relativePath);\r\n                const child = this.children.get(front);\r\n                if (child !== null) {\r\n                    const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     */\r\n    findRootMostValueAndPath(relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, () => true);\r\n    }\r\n    /**\r\n     * @returns The subtree at the given path\r\n     */\r\n    subtree(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param relativePath - Path to set value at.\r\n     * @param toSet - Value to set.\r\n     * @returns Resulting tree.\r\n     */\r\n    set(relativePath, toSet) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.set(pathPopFront(relativePath), toSet);\r\n            const newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param relativePath - Path to value to remove.\r\n     * @returns Resulting tree.\r\n     */\r\n    remove(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            if (this.children.isEmpty()) {\r\n                return new ImmutableTree(null);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                const newChild = child.remove(pathPopFront(relativePath));\r\n                let newChildren;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return new ImmutableTree(null);\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param relativePath - Path to get value for.\r\n     * @returns Value at path, or null.\r\n     */\r\n    get(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param relativePath - Path to replace subtree for.\r\n     * @param newTree - New tree.\r\n     * @returns Resulting tree.\r\n     */\r\n    setTree(relativePath, newTree) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.setTree(pathPopFront(relativePath), newTree);\r\n            let newChildren;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     */\r\n    fold(fn) {\r\n        return this.fold_(newEmptyPath(), fn);\r\n    }\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     */\r\n    fold_(pathSoFar, fn) {\r\n        const accum = {};\r\n        this.children.inorderTraversal((childKey, childTree) => {\r\n            accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    }\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     */\r\n    findOnPath(path, f) {\r\n        return this.findOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    findOnPath_(pathToFollow, pathSoFar, f) {\r\n        const result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathIsEmpty(pathToFollow)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(pathToFollow);\r\n                const nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    foreachOnPath(path, f) {\r\n        return this.foreachOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    foreachOnPath_(pathToFollow, currentRelativePath, f) {\r\n        if (pathIsEmpty(pathToFollow)) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            const front = pathGetFront(pathToFollow);\r\n            const nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param f - A function to be called with the path from the root of the tree to\r\n     * a node, and the value at that node. Called in depth-first order.\r\n     */\r\n    foreach(f) {\r\n        this.foreach_(newEmptyPath(), f);\r\n    }\r\n    foreach_(currentRelativePath, f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            childTree.foreach_(pathChild(currentRelativePath, childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    }\r\n    foreachChild(f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\r\nclass CompoundWrite {\r\n    constructor(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    static empty() {\r\n        return new CompoundWrite(new ImmutableTree(null));\r\n    }\r\n}\r\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\r\n    if (pathIsEmpty(path)) {\r\n        return new CompoundWrite(new ImmutableTree(node));\r\n    }\r\n    else {\r\n        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            const rootMostPath = rootmost.path;\r\n            let value = rootmost.value;\r\n            const relativePath = newRelativePath(rootMostPath, path);\r\n            value = value.updateChild(relativePath, node);\r\n            return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\r\n        }\r\n        else {\r\n            const subtree = new ImmutableTree(node);\r\n            const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    }\r\n}\r\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\r\n    let newWrite = compoundWrite;\r\n    each(updates, (childKey, node) => {\r\n        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\r\n    });\r\n    return newWrite;\r\n}\r\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\r\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return CompoundWrite.empty();\r\n    }\r\n    else {\r\n        const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\r\n        return new CompoundWrite(newWriteTree);\r\n    }\r\n}\r\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\r\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\r\n    return compoundWriteGetCompleteNode(compoundWrite, path) != null;\r\n}\r\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\r\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\r\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n    if (rootmost != null) {\r\n        return compoundWrite.writeTree_\r\n            .get(rootmost.path)\r\n            .getChild(newRelativePath(rootmost.path, path));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\r\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\r\n    const children = [];\r\n    const node = compoundWrite.writeTree_.value;\r\n    if (node != null) {\r\n        // If it's a leaf node, it has no children; so nothing to do.\r\n        if (!node.isLeafNode()) {\r\n            node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n                children.push(new NamedNode(childName, childNode));\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value != null) {\r\n                children.push(new NamedNode(childName, childTree.value));\r\n            }\r\n        });\r\n    }\r\n    return children;\r\n}\r\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return compoundWrite;\r\n    }\r\n    else {\r\n        const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\r\n        if (shadowingNode != null) {\r\n            return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n        }\r\n        else {\r\n            return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\r\nfunction compoundWriteIsEmpty(compoundWrite) {\r\n    return compoundWrite.writeTree_.isEmpty();\r\n}\r\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\r\nfunction compoundWriteApply(compoundWrite, node) {\r\n    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\r\n}\r\nfunction applySubtreeWrite(relativePath, writeTree, node) {\r\n    if (writeTree.value != null) {\r\n        // Since there a write is always a leaf, we're done here\r\n        return node.updateChild(relativePath, writeTree.value);\r\n    }\r\n    else {\r\n        let priorityWrite = null;\r\n        writeTree.children.inorderTraversal((childKey, childTree) => {\r\n            if (childKey === '.priority') {\r\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                // to apply priorities to empty nodes that are later filled\r\n                assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                priorityWrite = childTree.value;\r\n            }\r\n            else {\r\n                node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\r\n            }\r\n        });\r\n        // If there was a priority write, we only apply it if the node is not empty\r\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\r\n            node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\r\n        }\r\n        return node;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\r\nfunction writeTreeChildWrites(writeTree, path) {\r\n    return newWriteTreeRef(path, writeTree);\r\n}\r\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\r\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\r\n    if (visible === undefined) {\r\n        visible = true;\r\n    }\r\n    writeTree.allWrites.push({\r\n        path,\r\n        snap,\r\n        writeId,\r\n        visible\r\n    });\r\n    if (visible) {\r\n        writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\r\n    }\r\n    writeTree.lastWriteId = writeId;\r\n}\r\n/**\r\n * Record a new merge from user code.\r\n */\r\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\r\n    writeTree.allWrites.push({\r\n        path,\r\n        children: changedChildren,\r\n        writeId,\r\n        visible: true\r\n    });\r\n    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\r\n    writeTree.lastWriteId = writeId;\r\n}\r\nfunction writeTreeGetWrite(writeTree, writeId) {\r\n    for (let i = 0; i < writeTree.allWrites.length; i++) {\r\n        const record = writeTree.allWrites[i];\r\n        if (record.writeId === writeId) {\r\n            return record;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\r\nfunction writeTreeRemoveWrite(writeTree, writeId) {\r\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n    // out of order.\r\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n    const idx = writeTree.allWrites.findIndex(s => {\r\n        return s.writeId === writeId;\r\n    });\r\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n    const writeToRemove = writeTree.allWrites[idx];\r\n    writeTree.allWrites.splice(idx, 1);\r\n    let removedWriteWasVisible = writeToRemove.visible;\r\n    let removedWriteOverlapsWithOtherWrites = false;\r\n    let i = writeTree.allWrites.length - 1;\r\n    while (removedWriteWasVisible && i >= 0) {\r\n        const currentWrite = writeTree.allWrites[i];\r\n        if (currentWrite.visible) {\r\n            if (i >= idx &&\r\n                writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                // The removed write was completely shadowed by a subsequent write.\r\n                removedWriteWasVisible = false;\r\n            }\r\n            else if (pathContains(writeToRemove.path, currentWrite.path)) {\r\n                // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                removedWriteOverlapsWithOtherWrites = true;\r\n            }\r\n        }\r\n        i--;\r\n    }\r\n    if (!removedWriteWasVisible) {\r\n        return false;\r\n    }\r\n    else if (removedWriteOverlapsWithOtherWrites) {\r\n        // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n        writeTreeResetTree_(writeTree);\r\n        return true;\r\n    }\r\n    else {\r\n        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n        if (writeToRemove.snap) {\r\n            writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\r\n        }\r\n        else {\r\n            const children = writeToRemove.children;\r\n            each(children, (childName) => {\r\n                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\r\n            });\r\n        }\r\n        return true;\r\n    }\r\n}\r\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\r\n    if (writeRecord.snap) {\r\n        return pathContains(writeRecord.path, path);\r\n    }\r\n    else {\r\n        for (const childName in writeRecord.children) {\r\n            if (writeRecord.children.hasOwnProperty(childName) &&\r\n                pathContains(pathChild(writeRecord.path, childName), path)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\r\nfunction writeTreeResetTree_(writeTree) {\r\n    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\r\n    if (writeTree.allWrites.length > 0) {\r\n        writeTree.lastWriteId =\r\n            writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\r\n    }\r\n    else {\r\n        writeTree.lastWriteId = -1;\r\n    }\r\n}\r\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\r\nfunction writeTreeDefaultFilter_(write) {\r\n    return write.visible;\r\n}\r\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\r\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\r\n    let compoundWrite = CompoundWrite.empty();\r\n    for (let i = 0; i < writes.length; ++i) {\r\n        const write = writes[i];\r\n        // Theory, a later set will either:\r\n        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n        if (filter(write)) {\r\n            const writePath = write.path;\r\n            let relativePath;\r\n            if (write.snap) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\r\n                }\r\n                else ;\r\n            }\r\n            else if (write.children) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    if (pathIsEmpty(relativePath)) {\r\n                        compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\r\n                    }\r\n                    else {\r\n                        const child = safeGet(write.children, pathGetFront(relativePath));\r\n                        if (child) {\r\n                            // There exists a child in this node that matches the root path\r\n                            const deepNode = child.getChild(pathPopFront(relativePath));\r\n                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\r\n                        }\r\n                    }\r\n                }\r\n                else ;\r\n            }\r\n            else {\r\n                throw assertionError('WriteRecord should have .snap or .children');\r\n            }\r\n        }\r\n    }\r\n    return compoundWrite;\r\n}\r\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    if (!writeIdsToExclude && !includeHiddenWrites) {\r\n        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n            if (compoundWriteIsEmpty(subMerge)) {\r\n                return completeServerCache;\r\n            }\r\n            else if (completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\r\n                // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                return null;\r\n            }\r\n            else {\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(subMerge, layeredCache);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\r\n            return completeServerCache;\r\n        }\r\n        else {\r\n            // If the server cache is null, and we don't have a complete cache, we need to return null\r\n            if (!includeHiddenWrites &&\r\n                completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\r\n                return null;\r\n            }\r\n            else {\r\n                const filter = function (write) {\r\n                    return ((write.visible || includeHiddenWrites) &&\r\n                        (!writeIdsToExclude ||\r\n                            !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                        (pathContains(write.path, treePath) ||\r\n                            pathContains(treePath, write.path)));\r\n                };\r\n                const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(mergeAtPath, layeredCache);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\r\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\r\n    let completeChildren = ChildrenNode.EMPTY_NODE;\r\n    const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n    if (topLevelSet) {\r\n        if (!topLevelSet.isLeafNode()) {\r\n            // we're shadowing everything. Return the children.\r\n            topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\r\n                completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n            });\r\n        }\r\n        return completeChildren;\r\n    }\r\n    else if (completeServerChildren) {\r\n        // Layer any children we have on top of this\r\n        // We know we don't have a top-level set, so just enumerate existing children\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\r\n            completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n        });\r\n        // Add any complete children we have from the set\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n    else {\r\n        // We don't have anything to layer on top of. Layer on any children we have\r\n        // Note that we can return an empty snap if we have a defined delete\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n}\r\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\r\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\r\n    assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n    const path = pathChild(treePath, childPath);\r\n    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\r\n        // At this point we can probably guarantee that we're in case 2, meaning no events\r\n        // May need to check visibility while doing the findRootMostValueAndPath call\r\n        return null;\r\n    }\r\n    else {\r\n        // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n        const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n        if (compoundWriteIsEmpty(childMerge)) {\r\n            // We're not shadowing at all. Case 1\r\n            return existingServerSnap.getChild(childPath);\r\n        }\r\n        else {\r\n            // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n            // However this is tricky to find out, since user updates don't necessary change the server\r\n            // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n            // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n            // only check if the updates change the serverNode.\r\n            // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n            return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\r\n    const path = pathChild(treePath, childKey);\r\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n    if (shadowingNode != null) {\r\n        return shadowingNode;\r\n    }\r\n    else {\r\n        if (existingServerSnap.isCompleteForChild(childKey)) {\r\n            const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n            return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\r\nfunction writeTreeShadowingWrite(writeTree, path) {\r\n    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\r\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\r\n    let toIterate;\r\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n    const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\r\n    if (shadowingNode != null) {\r\n        toIterate = shadowingNode;\r\n    }\r\n    else if (completeServerData != null) {\r\n        toIterate = compoundWriteApply(merge, completeServerData);\r\n    }\r\n    else {\r\n        // no children to iterate on\r\n        return [];\r\n    }\r\n    toIterate = toIterate.withIndex(index);\r\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n        const nodes = [];\r\n        const cmp = index.getCompare();\r\n        const iter = reverse\r\n            ? toIterate.getReverseIteratorFrom(startPost, index)\r\n            : toIterate.getIteratorFrom(startPost, index);\r\n        let next = iter.getNext();\r\n        while (next && nodes.length < count) {\r\n            if (cmp(next, startPost) !== 0) {\r\n                nodes.push(next);\r\n            }\r\n            next = iter.getNext();\r\n        }\r\n        return nodes;\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\nfunction newWriteTree() {\r\n    return {\r\n        visibleWrites: CompoundWrite.empty(),\r\n        allWrites: [],\r\n        lastWriteId: -1\r\n    };\r\n}\r\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n}\r\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\r\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\r\n    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\r\n}\r\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\r\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\r\n    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\r\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\r\n    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\r\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\r\n    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\r\n    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\r\n}\r\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\r\nfunction writeTreeRefChild(writeTreeRef, childName) {\r\n    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\r\n}\r\nfunction newWriteTreeRef(path, writeTree) {\r\n    return {\r\n        treePath: path,\r\n        writeTree\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ChildChangeAccumulator {\r\n    constructor() {\r\n        this.changeMap = new Map();\r\n    }\r\n    trackChildChange(change) {\r\n        const type = change.type;\r\n        const childKey = change.childName;\r\n        assert(type === \"child_added\" /* CHILD_ADDED */ ||\r\n            type === \"child_changed\" /* CHILD_CHANGED */ ||\r\n            type === \"child_removed\" /* CHILD_REMOVED */, 'Only child changes supported for tracking');\r\n        assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        const oldChange = this.changeMap.get(childKey);\r\n        if (oldChange) {\r\n            const oldType = oldChange.type;\r\n            if (type === \"child_added\" /* CHILD_ADDED */ &&\r\n                oldType === \"child_removed\" /* CHILD_REMOVED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.delete(childKey);\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\r\n            }\r\n            else {\r\n                throw assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap.set(childKey, change);\r\n        }\r\n    }\r\n    getChanges() {\r\n        return Array.from(this.changeMap.values());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass NoCompleteChildSource_ {\r\n    getCompleteChild(childKey) {\r\n        return null;\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Singleton instance.\r\n */\r\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\r\nclass WriteTreeCompleteChildSource {\r\n    constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    getCompleteChild(childKey) {\r\n        const node = this.viewCache_.eventCache;\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            const serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.serverCache;\r\n            return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\r\n        }\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        const completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : viewCacheGetCompleteServerSnap(this.viewCache_);\r\n        const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewProcessor(filter) {\r\n    return { filter };\r\n}\r\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\r\n    assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\r\n    assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\r\n}\r\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\r\n    const accumulator = new ChildChangeAccumulator();\r\n    let newViewCache, filterServerNode;\r\n    if (operation.type === OperationType.OVERWRITE) {\r\n        const overwrite = operation;\r\n        if (overwrite.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(overwrite.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n            // again\r\n            filterServerNode =\r\n                overwrite.source.tagged ||\r\n                    (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\r\n            newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.MERGE) {\r\n        const merge = operation;\r\n        if (merge.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(merge.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered\r\n            filterServerNode =\r\n                merge.source.tagged || oldViewCache.serverCache.isFiltered();\r\n            newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n        const ackUserWrite = operation;\r\n        if (!ackUserWrite.revert) {\r\n            newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n        newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\r\n    }\r\n    else {\r\n        throw assertionError('Unknown operation type: ' + operation.type);\r\n    }\r\n    const changes = accumulator.getChanges();\r\n    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\r\n    return { viewCache: newViewCache, changes };\r\n}\r\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\r\n    const eventSnap = newViewCache.eventCache;\r\n    if (eventSnap.isFullyInitialized()) {\r\n        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n        const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\r\n        if (accumulator.length > 0 ||\r\n            !oldViewCache.eventCache.isFullyInitialized() ||\r\n            (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\r\n            !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\r\n            accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\r\n        }\r\n    }\r\n}\r\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\r\n    const oldEventSnap = viewCache.eventCache;\r\n    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\r\n        // we have a shadowing write, ignore changes\r\n        return viewCache;\r\n    }\r\n    else {\r\n        let newEventCache, serverNode;\r\n        if (pathIsEmpty(changePath)) {\r\n            // TODO: figure out how this plays with \"sliding ack windows\"\r\n            assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n            if (viewCache.serverCache.isFiltered()) {\r\n                // We need to special case this, because we need to only apply writes to complete children, or\r\n                // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                // writes cannot be guaranteed to be complete\r\n                const serverCache = viewCacheGetCompleteServerSnap(viewCache);\r\n                const completeChildren = serverCache instanceof ChildrenNode\r\n                    ? serverCache\r\n                    : ChildrenNode.EMPTY_NODE;\r\n                const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\r\n            }\r\n            else {\r\n                const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\r\n            }\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(changePath);\r\n            if (childKey === '.priority') {\r\n                assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\r\n                const oldEventNode = oldEventSnap.getNode();\r\n                serverNode = viewCache.serverCache.getNode();\r\n                // we might have overwrites for this priority\r\n                const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\r\n                if (updatedPriority != null) {\r\n                    newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\r\n                }\r\n                else {\r\n                    // priority didn't change, keep old node\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n            else {\r\n                const childChangePath = pathPopFront(changePath);\r\n                // update child\r\n                let newEventChild;\r\n                if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                    serverNode = viewCache.serverCache.getNode();\r\n                    const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\r\n                    if (eventChildUpdate != null) {\r\n                        newEventChild = oldEventSnap\r\n                            .getNode()\r\n                            .getImmediateChild(childKey)\r\n                            .updateChild(childChangePath, eventChildUpdate);\r\n                    }\r\n                    else {\r\n                        // Nothing changed, just keep the old child\r\n                        newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                    }\r\n                }\r\n                else {\r\n                    newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n                }\r\n                if (newEventChild != null) {\r\n                    newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                }\r\n                else {\r\n                    // no complete child available or no change\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n        }\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\r\n    }\r\n}\r\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n    const oldServerSnap = oldViewCache.serverCache;\r\n    let newServerCache;\r\n    const serverFilter = filterServerNode\r\n        ? viewProcessor.filter\r\n        : viewProcessor.filter.getIndexedFilter();\r\n    if (pathIsEmpty(changePath)) {\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n    }\r\n    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n        const newServerNode = oldServerSnap\r\n            .getNode()\r\n            .updateChild(changePath, changedSnap);\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n            pathGetLength(changePath) > 1) {\r\n            // We don't update incomplete nodes with updates intended for other listeners\r\n            return oldViewCache;\r\n        }\r\n        const childChangePath = pathPopFront(changePath);\r\n        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n        const newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n        if (childKey === '.priority') {\r\n            newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n        }\r\n        else {\r\n            newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n        }\r\n    }\r\n    const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\r\n    const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\r\n}\r\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n    const oldEventSnap = oldViewCache.eventCache;\r\n    let newViewCache, newEventCache;\r\n    const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n    if (pathIsEmpty(changePath)) {\r\n        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\r\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (childKey === '.priority') {\r\n            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\r\n            newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n        }\r\n        else {\r\n            const childChangePath = pathPopFront(changePath);\r\n            const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n            let newChild;\r\n            if (pathIsEmpty(childChangePath)) {\r\n                // Child overwrite, we can replace the child\r\n                newChild = changedSnap;\r\n            }\r\n            else {\r\n                const childNode = source.getCompleteChild(childKey);\r\n                if (childNode != null) {\r\n                    if (pathGetBack(childChangePath) === '.priority' &&\r\n                        childNode.getChild(pathParent(childChangePath)).isEmpty()) {\r\n                        // This is a priority update on an empty node. If this node exists on the server, the\r\n                        // server will send down the priority in the update, so ignore for now\r\n                        newChild = childNode;\r\n                    }\r\n                    else {\r\n                        newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                    }\r\n                }\r\n                else {\r\n                    // There is no complete child node available\r\n                    newChild = ChildrenNode.EMPTY_NODE;\r\n                }\r\n            }\r\n            if (!oldChild.equals(newChild)) {\r\n                const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\r\n            }\r\n            else {\r\n                newViewCache = oldViewCache;\r\n            }\r\n        }\r\n    }\r\n    return newViewCache;\r\n}\r\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\r\n    return viewCache.eventCache.isCompleteForChild(childKey);\r\n}\r\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\r\n    merge.foreach((relativePath, childNode) => {\r\n        node = node.updateChild(relativePath, childNode);\r\n    });\r\n    return node;\r\n}\r\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n    // wait for the complete data update coming soon.\r\n    if (viewCache.serverCache.getNode().isEmpty() &&\r\n        !viewCache.serverCache.isFullyInitialized()) {\r\n        return viewCache;\r\n    }\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    let viewMergeTree;\r\n    if (pathIsEmpty(path)) {\r\n        viewMergeTree = changedChildren;\r\n    }\r\n    else {\r\n        viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\r\n    }\r\n    const serverNode = viewCache.serverCache.getNode();\r\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\r\n        if (serverNode.hasChild(childKey)) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\r\n        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&\r\n            childMergeTree.value === undefined;\r\n        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\r\n        return viewCache;\r\n    }\r\n    // Only filter server node if it is currently filtered\r\n    const filterServerNode = viewCache.serverCache.isFiltered();\r\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n    // now that it won't be shadowed.\r\n    const serverCache = viewCache.serverCache;\r\n    if (affectedTree.value != null) {\r\n        // This is an overwrite.\r\n        if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\r\n            serverCache.isCompleteForPath(ackPath)) {\r\n            return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else if (pathIsEmpty(ackPath)) {\r\n            // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n            // should just re-apply whatever we have in our cache as a merge.\r\n            let changedChildren = new ImmutableTree(null);\r\n            serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\r\n                changedChildren = changedChildren.set(new Path(name), node);\r\n            });\r\n            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else {\r\n            return viewCache;\r\n        }\r\n    }\r\n    else {\r\n        // This is a merge.\r\n        let changedChildren = new ImmutableTree(null);\r\n        affectedTree.foreach((mergePath, value) => {\r\n            const serverCachePath = pathChild(ackPath, mergePath);\r\n            if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n            }\r\n        });\r\n        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n    }\r\n}\r\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\r\n    const oldServerNode = viewCache.serverCache;\r\n    const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n}\r\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\r\n    let complete;\r\n    if (writeTreeRefShadowingWrite(writesCache, path) != null) {\r\n        return viewCache;\r\n    }\r\n    else {\r\n        const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n        const oldEventCache = viewCache.eventCache.getNode();\r\n        let newEventCache;\r\n        if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\r\n            let newNode;\r\n            if (viewCache.serverCache.isFullyInitialized()) {\r\n                newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n            }\r\n            else {\r\n                const serverChildren = viewCache.serverCache.getNode();\r\n                assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\r\n            }\r\n            newNode = newNode;\r\n            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(path);\r\n            let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n            if (newChild == null &&\r\n                viewCache.serverCache.isCompleteForChild(childKey)) {\r\n                newChild = oldEventCache.getImmediateChild(childKey);\r\n            }\r\n            if (newChild != null) {\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\r\n            }\r\n            else if (viewCache.eventCache.getNode().hasChild(childKey)) {\r\n                // No complete child available, delete the existing one, if any\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\r\n            }\r\n            else {\r\n                newEventCache = oldEventCache;\r\n            }\r\n            if (newEventCache.isEmpty() &&\r\n                viewCache.serverCache.isFullyInitialized()) {\r\n                // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                if (complete.isLeafNode()) {\r\n                    newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\r\n                }\r\n            }\r\n        }\r\n        complete =\r\n            viewCache.serverCache.isFullyInitialized() ||\r\n                writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\r\nclass View {\r\n    constructor(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        const params = this.query_._queryParams;\r\n        const indexFilter = new IndexedFilter(params.getIndex());\r\n        const filter = queryParamsGetNodeFilter(params);\r\n        this.processor_ = newViewProcessor(filter);\r\n        const initialServerCache = initialViewCache.serverCache;\r\n        const initialEventCache = initialViewCache.eventCache;\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        this.viewCache_ = newViewCache(newEventCache, newServerCache);\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    get query() {\r\n        return this.query_;\r\n    }\r\n}\r\nfunction viewGetServerCache(view) {\r\n    return view.viewCache_.serverCache.getNode();\r\n}\r\nfunction viewGetCompleteNode(view) {\r\n    return viewCacheGetCompleteEventSnap(view.viewCache_);\r\n}\r\nfunction viewGetCompleteServerCache(view, path) {\r\n    const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\r\n    if (cache) {\r\n        // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n        // we need to see if it contains the child we're interested in.\r\n        if (view.query._queryParams.loadsAllData() ||\r\n            (!pathIsEmpty(path) &&\r\n                !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {\r\n            return cache.getChild(path);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction viewIsEmpty(view) {\r\n    return view.eventRegistrations_.length === 0;\r\n}\r\nfunction viewAddEventRegistration(view, eventRegistration) {\r\n    view.eventRegistrations_.push(eventRegistration);\r\n}\r\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\r\n    const cancelEvents = [];\r\n    if (cancelError) {\r\n        assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n        const path = view.query._path;\r\n        view.eventRegistrations_.forEach(registration => {\r\n            const maybeEvent = registration.createCancelEvent(cancelError, path);\r\n            if (maybeEvent) {\r\n                cancelEvents.push(maybeEvent);\r\n            }\r\n        });\r\n    }\r\n    if (eventRegistration) {\r\n        let remaining = [];\r\n        for (let i = 0; i < view.eventRegistrations_.length; ++i) {\r\n            const existing = view.eventRegistrations_[i];\r\n            if (!existing.matches(eventRegistration)) {\r\n                remaining.push(existing);\r\n            }\r\n            else if (eventRegistration.hasAnyCallback()) {\r\n                // We're removing just this one\r\n                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\r\n                break;\r\n            }\r\n        }\r\n        view.eventRegistrations_ = remaining;\r\n    }\r\n    else {\r\n        view.eventRegistrations_ = [];\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\r\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\r\n    if (operation.type === OperationType.MERGE &&\r\n        operation.source.queryId !== null) {\r\n        assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\r\n        assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\r\n    }\r\n    const oldViewCache = view.viewCache_;\r\n    const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\r\n    viewProcessorAssertIndexed(view.processor_, result.viewCache);\r\n    assert(result.viewCache.serverCache.isFullyInitialized() ||\r\n        !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n    view.viewCache_ = result.viewCache;\r\n    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\r\n}\r\nfunction viewGetInitialEvents(view, registration) {\r\n    const eventSnap = view.viewCache_.eventCache;\r\n    const initialChanges = [];\r\n    if (!eventSnap.getNode().isLeafNode()) {\r\n        const eventNode = eventSnap.getNode();\r\n        eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            initialChanges.push(changeChildAdded(key, childNode));\r\n        });\r\n    }\r\n    if (eventSnap.isFullyInitialized()) {\r\n        initialChanges.push(changeValue(eventSnap.getNode()));\r\n    }\r\n    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\r\n}\r\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\r\n    const registrations = eventRegistration\r\n        ? [eventRegistration]\r\n        : view.eventRegistrations_;\r\n    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nclass SyncPoint {\r\n    constructor() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         */\r\n        this.views = new Map();\r\n    }\r\n}\r\nfunction syncPointSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\r\n    referenceConstructor$1 = val;\r\n}\r\nfunction syncPointGetReferenceConstructor() {\r\n    assert(referenceConstructor$1, 'Reference.ts has not been loaded');\r\n    return referenceConstructor$1;\r\n}\r\nfunction syncPointIsEmpty(syncPoint) {\r\n    return syncPoint.views.size === 0;\r\n}\r\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\r\n    const queryId = operation.source.queryId;\r\n    if (queryId !== null) {\r\n        const view = syncPoint.views.get(queryId);\r\n        assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\r\n    }\r\n    else {\r\n        let events = [];\r\n        for (const view of syncPoint.views.values()) {\r\n            events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\r\n    const queryId = query._queryIdentifier;\r\n    const view = syncPoint.views.get(queryId);\r\n    if (!view) {\r\n        // TODO: make writesCache take flag for complete server node\r\n        let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\r\n        let eventCacheComplete = false;\r\n        if (eventCache) {\r\n            eventCacheComplete = true;\r\n        }\r\n        else if (serverCache instanceof ChildrenNode) {\r\n            eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\r\n            eventCacheComplete = false;\r\n        }\r\n        else {\r\n            eventCache = ChildrenNode.EMPTY_NODE;\r\n            eventCacheComplete = false;\r\n        }\r\n        const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\r\n        return new View(query, viewCache);\r\n    }\r\n    return view;\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\r\n    if (!syncPoint.views.has(query._queryIdentifier)) {\r\n        syncPoint.views.set(query._queryIdentifier, view);\r\n    }\r\n    // This is guaranteed to exist now, we just created anything that was missing\r\n    viewAddEventRegistration(view, eventRegistration);\r\n    return viewGetInitialEvents(view, eventRegistration);\r\n}\r\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\r\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\r\n    const queryId = query._queryIdentifier;\r\n    const removed = [];\r\n    let cancelEvents = [];\r\n    const hadCompleteView = syncPointHasCompleteView(syncPoint);\r\n    if (queryId === 'default') {\r\n        // When you do ref.off(...), we search all views for the registration to remove.\r\n        for (const [viewQueryId, view] of syncPoint.views.entries()) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(viewQueryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // remove the callback from the specific view.\r\n        const view = syncPoint.views.get(queryId);\r\n        if (view) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(queryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\r\n        // We removed our last complete view.\r\n        removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\r\n    }\r\n    return { removed, events: cancelEvents };\r\n}\r\nfunction syncPointGetQueryViews(syncPoint) {\r\n    const result = [];\r\n    for (const view of syncPoint.views.values()) {\r\n        if (!view.query._queryParams.loadsAllData()) {\r\n            result.push(view);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\r\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\r\n    let serverCache = null;\r\n    for (const view of syncPoint.views.values()) {\r\n        serverCache = serverCache || viewGetCompleteServerCache(view, path);\r\n    }\r\n    return serverCache;\r\n}\r\nfunction syncPointViewForQuery(syncPoint, query) {\r\n    const params = query._queryParams;\r\n    if (params.loadsAllData()) {\r\n        return syncPointGetCompleteView(syncPoint);\r\n    }\r\n    else {\r\n        const queryId = query._queryIdentifier;\r\n        return syncPoint.views.get(queryId);\r\n    }\r\n}\r\nfunction syncPointViewExistsForQuery(syncPoint, query) {\r\n    return syncPointViewForQuery(syncPoint, query) != null;\r\n}\r\nfunction syncPointHasCompleteView(syncPoint) {\r\n    return syncPointGetCompleteView(syncPoint) != null;\r\n}\r\nfunction syncPointGetCompleteView(syncPoint) {\r\n    for (const view of syncPoint.views.values()) {\r\n        if (view.query._queryParams.loadsAllData()) {\r\n            return view;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor;\r\nfunction syncTreeSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor, '__referenceConstructor has already been defined');\r\n    referenceConstructor = val;\r\n}\r\nfunction syncTreeGetReferenceConstructor() {\r\n    assert(referenceConstructor, 'Reference.ts has not been loaded');\r\n    return referenceConstructor;\r\n}\r\n/**\r\n * Static tracker for next query tag.\r\n */\r\nlet syncTreeNextQueryTag_ = 1;\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\r\nclass SyncTree {\r\n    /**\r\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    constructor(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         */\r\n        this.syncPointTree_ = new ImmutableTree(null);\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         */\r\n        this.pendingWriteTree_ = newWriteTree();\r\n        this.tagToQueryMap = new Map();\r\n        this.queryToTagMap = new Map();\r\n    }\r\n}\r\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\r\n    // Record pending write.\r\n    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\r\n    if (!visible) {\r\n        return [];\r\n    }\r\n    else {\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\r\n    }\r\n}\r\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\r\n    // Record pending merge.\r\n    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\r\n}\r\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\r\n    const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\r\n    const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\r\n    if (!needToReevaluate) {\r\n        return [];\r\n    }\r\n    else {\r\n        let affectedTree = new ImmutableTree(null);\r\n        if (write.snap != null) {\r\n            // overwrite\r\n            affectedTree = affectedTree.set(newEmptyPath(), true);\r\n        }\r\n        else {\r\n            each(write.children, (pathString) => {\r\n                affectedTree = affectedTree.set(new Path(pathString), true);\r\n            });\r\n        }\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\r\n    }\r\n}\r\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\r\n}\r\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\r\n}\r\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyListenComplete(syncTree, path) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\r\n}\r\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError) {\r\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n    const path = query._path;\r\n    const maybeSyncPoint = syncTree.syncPointTree_.get(path);\r\n    let cancelEvents = [];\r\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n    // not loadsAllData().\r\n    if (maybeSyncPoint &&\r\n        (query._queryIdentifier === 'default' ||\r\n            syncPointViewExistsForQuery(maybeSyncPoint, query))) {\r\n        const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\r\n        if (syncPointIsEmpty(maybeSyncPoint)) {\r\n            syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\r\n        }\r\n        const removed = removedAndEvents.removed;\r\n        cancelEvents = removedAndEvents.events;\r\n        // We may have just removed one of many listeners and can short-circuit this whole process\r\n        // We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n        // properly set up.\r\n        //\r\n        // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n        // queryId === 'default'\r\n        const removingDefault = -1 !==\r\n            removed.findIndex(query => {\r\n                return query._queryParams.loadsAllData();\r\n            });\r\n        const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\r\n        if (removingDefault && !covered) {\r\n            const subtree = syncTree.syncPointTree_.subtree(path);\r\n            // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n            // removal\r\n            if (!subtree.isEmpty()) {\r\n                // We need to fold over our subtree and collect the listeners to send\r\n                const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\r\n                // Ok, we've collected all the listens we need. Set them up.\r\n                for (let i = 0; i < newViews.length; ++i) {\r\n                    const view = newViews[i], newQuery = view.query;\r\n                    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n                    syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery_(syncTree, newQuery), listener.hashFn, listener.onComplete);\r\n                }\r\n            }\r\n        }\r\n        // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n        // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n        // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n        if (!covered && removed.length > 0 && !cancelError) {\r\n            // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n            // default. Otherwise, we need to iterate through and cancel each individual query\r\n            if (removingDefault) {\r\n                // We don't tag default listeners\r\n                const defaultTag = null;\r\n                syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\r\n            }\r\n            else {\r\n                removed.forEach((queryToRemove) => {\r\n                    const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\r\n                    syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\r\n                });\r\n            }\r\n        }\r\n        // Now, clear all of the tags we're tracking for the removed listens\r\n        syncTreeRemoveTags_(syncTree, removed);\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey != null) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // Query must have been removed already\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const changeTree = ImmutableTree.fromObject(changedChildren);\r\n        const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    let foundAncestorDefaultView = false;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(sp);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let serverCacheComplete;\r\n    if (serverCache != null) {\r\n        serverCacheComplete = true;\r\n    }\r\n    else {\r\n        serverCacheComplete = false;\r\n        serverCache = ChildrenNode.EMPTY_NODE;\r\n        const subtree = syncTree.syncPointTree_.subtree(path);\r\n        subtree.foreachChild((childName, childSyncPoint) => {\r\n            const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\r\n            if (completeCache) {\r\n                serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n            }\r\n        });\r\n    }\r\n    const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\r\n    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\r\n        // We need to track a tag for this query\r\n        const queryKey = syncTreeMakeQueryKey_(query);\r\n        assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\r\n        const tag = syncTreeGetNextQueryTag_();\r\n        syncTree.queryToTagMap.set(queryKey, tag);\r\n        syncTree.tagToQueryMap.set(tag, queryKey);\r\n    }\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\r\n    let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\r\n        const view = syncPointViewForQuery(syncPoint, query);\r\n        events = events.concat(syncTreeSetupListener_(syncTree, query, view));\r\n    }\r\n    return events;\r\n}\r\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\r\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\r\n    const includeHiddenSets = true;\r\n    const writeTree = syncTree.pendingWriteTree_;\r\n    const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\r\n        const relativePath = newRelativePath(pathSoFar, path);\r\n        const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\r\n        if (serverCache) {\r\n            return serverCache;\r\n        }\r\n    });\r\n    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n}\r\nfunction syncTreeGetServerValue(syncTree, query) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    const serverCacheComplete = serverCache != null;\r\n    const serverCacheNode = serverCacheComplete\r\n        ? new CacheNode(serverCache, true, false)\r\n        : null;\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\r\n    return viewGetCompleteNode(view);\r\n}\r\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\r\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\r\n    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, \r\n    /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    if (pathIsEmpty(operation.path)) {\r\n        return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n    }\r\n    else {\r\n        const syncPoint = syncPointTree.get(newEmptyPath());\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n        }\r\n        let events = [];\r\n        const childName = pathGetFront(operation.path);\r\n        const childOperation = operation.operationForChild(childName);\r\n        const childTree = syncPointTree.children.get(childName);\r\n        if (childTree && childOperation) {\r\n            const childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n            events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n        if (syncPoint) {\r\n            events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    const syncPoint = syncPointTree.get(newEmptyPath());\r\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n    if (serverCache == null && syncPoint != null) {\r\n        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let events = [];\r\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\r\n        const childServerCache = serverCache\r\n            ? serverCache.getImmediateChild(childName)\r\n            : null;\r\n        const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n        const childOperation = operation.operationForChild(childName);\r\n        if (childOperation) {\r\n            events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n    });\r\n    if (syncPoint) {\r\n        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n    }\r\n    return events;\r\n}\r\nfunction syncTreeCreateListenerForView_(syncTree, view) {\r\n    const query = view.query;\r\n    const tag = syncTreeTagForQuery_(syncTree, query);\r\n    return {\r\n        hashFn: () => {\r\n            const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\r\n            return cache.hash();\r\n        },\r\n        onComplete: (status) => {\r\n            if (status === 'ok') {\r\n                if (tag) {\r\n                    return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\r\n                }\r\n                else {\r\n                    return syncTreeApplyListenComplete(syncTree, query._path);\r\n                }\r\n            }\r\n            else {\r\n                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                const error = errorForServerCode(status, query);\r\n                return syncTreeRemoveEventRegistration(syncTree, query, \r\n                /*eventRegistration*/ null, error);\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * Return the tag associated with the given query.\r\n */\r\nfunction syncTreeTagForQuery_(syncTree, query) {\r\n    const queryKey = syncTreeMakeQueryKey_(query);\r\n    return syncTree.queryToTagMap.get(queryKey);\r\n}\r\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\r\nfunction syncTreeMakeQueryKey_(query) {\r\n    return query._path.toString() + '$' + query._queryIdentifier;\r\n}\r\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\r\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\r\n    return syncTree.tagToQueryMap.get(tag);\r\n}\r\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\r\nfunction syncTreeParseQueryKey_(queryKey) {\r\n    const splitIndex = queryKey.indexOf('$');\r\n    assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n    return {\r\n        queryId: queryKey.substr(splitIndex + 1),\r\n        path: new Path(queryKey.substr(0, splitIndex))\r\n    };\r\n}\r\n/**\r\n * A helper method to apply tagged operations\r\n */\r\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\r\n    const syncPoint = syncTree.syncPointTree_.get(queryPath);\r\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\r\n    return syncPointApplyOperation(syncPoint, operation, writesCache, null);\r\n}\r\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\r\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\r\n    return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n        if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n            const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\r\n            return [completeView];\r\n        }\r\n        else {\r\n            // No complete view here, flatten any deeper listens into an array\r\n            let views = [];\r\n            if (maybeChildSyncPoint) {\r\n                views = syncPointGetQueryViews(maybeChildSyncPoint);\r\n            }\r\n            each(childMap, (_key, childViews) => {\r\n                views = views.concat(childViews);\r\n            });\r\n            return views;\r\n        }\r\n    });\r\n}\r\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\r\nfunction syncTreeQueryForListening_(query) {\r\n    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\r\n        // We treat queries that load all data as default queries\r\n        // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n        // from Query\r\n        return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\r\n    }\r\n    else {\r\n        return query;\r\n    }\r\n}\r\nfunction syncTreeRemoveTags_(syncTree, queries) {\r\n    for (let j = 0; j < queries.length; ++j) {\r\n        const removedQuery = queries[j];\r\n        if (!removedQuery._queryParams.loadsAllData()) {\r\n            // We should have a tag for this\r\n            const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\r\n            const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\r\n            syncTree.queryToTagMap.delete(removedQueryKey);\r\n            syncTree.tagToQueryMap.delete(removedQueryTag);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Static accessor for query tags.\r\n */\r\nfunction syncTreeGetNextQueryTag_() {\r\n    return syncTreeNextQueryTag_++;\r\n}\r\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\r\nfunction syncTreeSetupListener_(syncTree, query, view) {\r\n    const path = query._path;\r\n    const tag = syncTreeTagForQuery_(syncTree, query);\r\n    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n    const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n    const subtree = syncTree.syncPointTree_.subtree(path);\r\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n    // may need to shadow other listens as well.\r\n    if (tag) {\r\n        assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\r\n    }\r\n    else {\r\n        // Shadow everything at or below this location, this is a default listener.\r\n        const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n            if (!pathIsEmpty(relativePath) &&\r\n                maybeChildSyncPoint &&\r\n                syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n                return [syncPointGetCompleteView(maybeChildSyncPoint).query];\r\n            }\r\n            else {\r\n                // No default listener here, flatten any deeper queries into an array\r\n                let queries = [];\r\n                if (maybeChildSyncPoint) {\r\n                    queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\r\n                }\r\n                each(childMap, (_key, childQueries) => {\r\n                    queries = queries.concat(childQueries);\r\n                });\r\n                return queries;\r\n            }\r\n        });\r\n        for (let i = 0; i < queriesToStop.length; ++i) {\r\n            const queryToStop = queriesToStop[i];\r\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery_(syncTree, queryToStop));\r\n        }\r\n    }\r\n    return events;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ExistingValueProvider {\r\n    constructor(node_) {\r\n        this.node_ = node_;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const child = this.node_.getImmediateChild(childName);\r\n        return new ExistingValueProvider(child);\r\n    }\r\n    node() {\r\n        return this.node_;\r\n    }\r\n}\r\nclass DeferredValueProvider {\r\n    constructor(syncTree, path) {\r\n        this.syncTree_ = syncTree;\r\n        this.path_ = path;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const childPath = pathChild(this.path_, childName);\r\n        return new DeferredValueProvider(this.syncTree_, childPath);\r\n    }\r\n    node() {\r\n        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\r\n    }\r\n}\r\n/**\r\n * Generate placeholders for deferred values.\r\n */\r\nconst generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\r\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n    if (typeof value['.sv'] === 'string') {\r\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\r\n    }\r\n    else if (typeof value['.sv'] === 'object') {\r\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\r\n    }\r\n    else {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\r\n    }\r\n};\r\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\r\n    switch (op) {\r\n        case 'timestamp':\r\n            return serverValues['timestamp'];\r\n        default:\r\n            assert(false, 'Unexpected server value: ' + op);\r\n    }\r\n};\r\nconst resolveComplexDeferredValue = function (op, existing, unused) {\r\n    if (!op.hasOwnProperty('increment')) {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\r\n    }\r\n    const delta = op['increment'];\r\n    if (typeof delta !== 'number') {\r\n        assert(false, 'Unexpected increment value: ' + delta);\r\n    }\r\n    const existingNode = existing.node();\r\n    assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\r\n    // Incrementing a non-number sets the value to the incremented amount\r\n    if (!existingNode.isLeafNode()) {\r\n        return delta;\r\n    }\r\n    const leaf = existingNode;\r\n    const existingVal = leaf.getValue();\r\n    if (typeof existingVal !== 'number') {\r\n        return delta;\r\n    }\r\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\r\n    return existingVal + delta;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\r\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\r\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\r\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\r\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\r\n};\r\nfunction resolveDeferredValue(node, existingVal, serverValues) {\r\n    const rawPri = node.getPriority().val();\r\n    const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\r\n    let newNode;\r\n    if (node.isLeafNode()) {\r\n        const leafNode = node;\r\n        const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        const childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nclass Tree {\r\n    /**\r\n     * @param name - Optional name of the node.\r\n     * @param parent - Optional parent node.\r\n     * @param node - Optional node to wrap.\r\n     */\r\n    constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {\r\n        this.name = name;\r\n        this.parent = parent;\r\n        this.node = node;\r\n    }\r\n}\r\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\r\nfunction treeSubTree(tree, pathObj) {\r\n    // TODO: Require pathObj to be Path?\r\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n    let child = tree, next = pathGetFront(path);\r\n    while (next !== null) {\r\n        const childNode = safeGet(child.node.children, next) || {\r\n            children: {},\r\n            childCount: 0\r\n        };\r\n        child = new Tree(next, child, childNode);\r\n        path = pathPopFront(path);\r\n        next = pathGetFront(path);\r\n    }\r\n    return child;\r\n}\r\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\r\nfunction treeGetValue(tree) {\r\n    return tree.node.value;\r\n}\r\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\r\nfunction treeSetValue(tree, value) {\r\n    tree.node.value = value;\r\n    treeUpdateParents(tree);\r\n}\r\n/**\r\n * @returns Whether the tree has any children.\r\n */\r\nfunction treeHasChildren(tree) {\r\n    return tree.node.childCount > 0;\r\n}\r\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\r\nfunction treeIsEmpty(tree) {\r\n    return treeGetValue(tree) === undefined && !treeHasChildren(tree);\r\n}\r\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\r\nfunction treeForEachChild(tree, action) {\r\n    each(tree.node.children, (child, childTree) => {\r\n        action(new Tree(child, tree, childTree));\r\n    });\r\n}\r\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\r\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\r\n    if (includeSelf && !childrenFirst) {\r\n        action(tree);\r\n    }\r\n    treeForEachChild(tree, child => {\r\n        treeForEachDescendant(child, action, true, childrenFirst);\r\n    });\r\n    if (includeSelf && childrenFirst) {\r\n        action(tree);\r\n    }\r\n}\r\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\r\nfunction treeForEachAncestor(tree, action, includeSelf) {\r\n    let node = includeSelf ? tree : tree.parent;\r\n    while (node !== null) {\r\n        if (action(node)) {\r\n            return true;\r\n        }\r\n        node = node.parent;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\r\nfunction treeGetPath(tree) {\r\n    return new Path(tree.parent === null\r\n        ? tree.name\r\n        : treeGetPath(tree.parent) + '/' + tree.name);\r\n}\r\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\r\nfunction treeUpdateParents(tree) {\r\n    if (tree.parent !== null) {\r\n        treeUpdateChild(tree.parent, tree.name, tree);\r\n    }\r\n}\r\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\r\nfunction treeUpdateChild(tree, childName, child) {\r\n    const childEmpty = treeIsEmpty(child);\r\n    const childExists = contains(tree.node.children, childName);\r\n    if (childEmpty && childExists) {\r\n        delete tree.node.children[childName];\r\n        tree.node.childCount--;\r\n        treeUpdateParents(tree);\r\n    }\r\n    else if (!childEmpty && !childExists) {\r\n        tree.node.children[childName] = child.node;\r\n        tree.node.childCount++;\r\n        treeUpdateParents(tree);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n */\r\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\r\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\r\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\nconst isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\nconst isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\nconst isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\nconst isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority &&\r\n            typeof priority === 'object' &&\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\r\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\r\n    if (optional && value === undefined) {\r\n        return;\r\n    }\r\n    validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\r\nconst validateFirebaseData = function (errorPrefix, data, path_) {\r\n    const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            validationPathToErrorString(path) +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix +\r\n            'contains ' +\r\n            data.toString() +\r\n            ' ' +\r\n            validationPathToErrorString(path));\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            validationPathToErrorString(path) +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        let hasDotValue = false;\r\n        let hasActualChild = false;\r\n        each(data, (key, value) => {\r\n            if (key === '.value') {\r\n                hasDotValue = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        validationPathToErrorString(path) +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            validationPathPush(path, key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            validationPathPop(path);\r\n        });\r\n        if (hasDotValue && hasActualChild) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                validationPathToErrorString(path) +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\r\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    let i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        const keys = pathSlice(curPath);\r\n        for (let j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(pathCompare);\r\n    let prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && pathContains(prevPath, curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\r\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\r\n    if (optional && data === undefined) {\r\n        return;\r\n    }\r\n    const errorPrefix$1 = errorPrefix(fnName, 'values');\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\r\n    }\r\n    const mergePaths = [];\r\n    each(data, (key, value) => {\r\n        const curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\r\n        if (pathGetBack(curPath) === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix$1 +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix$1, mergePaths);\r\n};\r\nconst validatePriority = function (fnName, priority, optional) {\r\n    if (optional && priority === undefined) {\r\n        return;\r\n    }\r\n    if (isInvalidJSONNumber(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    }\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n    }\r\n};\r\nconst validateKey = function (fnName, argumentName, key, optional) {\r\n    if (optional && key === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidKey(key)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n    }\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\r\n    if (optional && pathString === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidPathString(pathString)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n    }\r\n};\r\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentName, pathString, optional);\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validateWritablePath = function (fnName, path) {\r\n    if (pathGetFront(path) === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nconst validateUrl = function (fnName, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    const pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(errorPrefix(fnName, 'url') +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\r\nclass EventQueue {\r\n    constructor() {\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n}\r\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\r\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\r\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n    let currList = null;\r\n    for (let i = 0; i < eventDataList.length; i++) {\r\n        const data = eventDataList[i];\r\n        const path = data.getPath();\r\n        if (currList !== null && !pathEquals(path, currList.path)) {\r\n            eventQueue.eventLists_.push(currList);\r\n            currList = null;\r\n        }\r\n        if (currList === null) {\r\n            currList = { events: [], path };\r\n        }\r\n        currList.events.push(data);\r\n    }\r\n    if (currList) {\r\n        eventQueue.eventLists_.push(currList);\r\n    }\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\r\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\r\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||\r\n        pathContains(changedPath, eventPath));\r\n}\r\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\r\n    eventQueue.recursionDepth_++;\r\n    let sentAll = true;\r\n    for (let i = 0; i < eventQueue.eventLists_.length; i++) {\r\n        const eventList = eventQueue.eventLists_[i];\r\n        if (eventList) {\r\n            const eventPath = eventList.path;\r\n            if (predicate(eventPath)) {\r\n                eventListRaise(eventQueue.eventLists_[i]);\r\n                eventQueue.eventLists_[i] = null;\r\n            }\r\n            else {\r\n                sentAll = false;\r\n            }\r\n        }\r\n    }\r\n    if (sentAll) {\r\n        eventQueue.eventLists_ = [];\r\n    }\r\n    eventQueue.recursionDepth_--;\r\n}\r\n/**\r\n * Iterates through the list and raises each event\r\n */\r\nfunction eventListRaise(eventList) {\r\n    for (let i = 0; i < eventList.events.length; i++) {\r\n        const eventData = eventList.events[i];\r\n        if (eventData !== null) {\r\n            eventList.events[i] = null;\r\n            const eventFn = eventData.getEventRunner();\r\n            if (logger) {\r\n                log('event: ' + eventData.toString());\r\n            }\r\n            exceptionGuard(eventFn);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\r\nconst MAX_TRANSACTION_RETRIES = 25;\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nclass Repo {\r\n    constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\r\n        this.repoInfo_ = repoInfo_;\r\n        this.forceRestClient_ = forceRestClient_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckProvider_ = appCheckProvider_;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        /** A list of data pieces and paths to be set when this client disconnects. */\r\n        this.onDisconnect_ = newSparseSnapshotTree();\r\n        /** Stores queues of outstanding transactions for Firebase locations. */\r\n        this.transactionQueueTree_ = new Tree();\r\n        // TODO: This should be @private but it's used by test_access.js and internal.js\r\n        this.persistentConnection_ = null;\r\n        // This key is intentionally not updated if RepoInfo is later changed or replaced\r\n        this.key = this.repoInfo_.toURLString();\r\n    }\r\n    /**\r\n     * @returns The URL corresponding to the root of this Firebase.\r\n     */\r\n    toString() {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    }\r\n}\r\nfunction repoStart(repo, appId, authOverride) {\r\n    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\r\n    if (repo.forceRestClient_ || beingCrawled()) {\r\n        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_);\r\n        // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n        setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\r\n    }\r\n    else {\r\n        // Validate authOverride\r\n        if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n            if (typeof authOverride !== 'object') {\r\n                throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n            }\r\n            try {\r\n                stringify(authOverride);\r\n            }\r\n            catch (e) {\r\n                throw new Error('Invalid authOverride provided: ' + e);\r\n            }\r\n        }\r\n        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, (connectStatus) => {\r\n            repoOnConnectStatus(repo, connectStatus);\r\n        }, (updates) => {\r\n            repoOnServerInfoUpdate(repo, updates);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\r\n        repo.server_ = repo.persistentConnection_;\r\n    }\r\n    repo.authTokenProvider_.addTokenChangeListener(token => {\r\n        repo.server_.refreshAuthToken(token);\r\n    });\r\n    repo.appCheckProvider_.addTokenChangeListener(result => {\r\n        repo.server_.refreshAppCheckToken(result.token);\r\n    });\r\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\r\n    // Used for .info.\r\n    repo.infoData_ = new SnapshotHolder();\r\n    repo.infoSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            let infoEvents = [];\r\n            const node = repo.infoData_.getNode(query._path);\r\n            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n            // on initial data...\r\n            if (!node.isEmpty()) {\r\n                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\r\n                setTimeout(() => {\r\n                    onComplete('ok');\r\n                }, 0);\r\n            }\r\n            return infoEvents;\r\n        },\r\n        stopListening: () => { }\r\n    });\r\n    repoUpdateInfo(repo, 'connected', false);\r\n    repo.serverSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            repo.server_.listen(query, currentHashFn, tag, (status, data) => {\r\n                const events = onComplete(status, data);\r\n                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n            });\r\n            // No synchronous events for network-backed sync trees\r\n            return [];\r\n        },\r\n        stopListening: (query, tag) => {\r\n            repo.server_.unlisten(query, tag);\r\n        }\r\n    });\r\n}\r\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\r\nfunction repoServerTime(repo) {\r\n    const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n    const offset = offsetNode.val() || 0;\r\n    return new Date().getTime() + offset;\r\n}\r\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\r\nfunction repoGenerateServerValues(repo) {\r\n    return generateWithValues({\r\n        timestamp: repoServerTime(repo)\r\n    });\r\n}\r\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\r\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\r\n    // For testing.\r\n    repo.dataUpdateCount++;\r\n    const path = new Path(pathString);\r\n    data = repo.interceptServerDataCallback_\r\n        ? repo.interceptServerDataCallback_(pathString, data)\r\n        : data;\r\n    let events = [];\r\n    if (tag) {\r\n        if (isMerge) {\r\n            const taggedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\r\n        }\r\n        else {\r\n            const taggedSnap = nodeFromJSON(data);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\r\n        }\r\n    }\r\n    else if (isMerge) {\r\n        const changedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\r\n    }\r\n    else {\r\n        const snap = nodeFromJSON(data);\r\n        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\r\n    }\r\n    let affectedPath = path;\r\n    if (events.length > 0) {\r\n        // Since we have a listener outstanding for each transaction, receiving any events\r\n        // is a proxy for some change having occurred.\r\n        affectedPath = repoRerunTransactions(repo, path);\r\n    }\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\r\n}\r\nfunction repoOnConnectStatus(repo, connectStatus) {\r\n    repoUpdateInfo(repo, 'connected', connectStatus);\r\n    if (connectStatus === false) {\r\n        repoRunOnDisconnectEvents(repo);\r\n    }\r\n}\r\nfunction repoOnServerInfoUpdate(repo, updates) {\r\n    each(updates, (key, value) => {\r\n        repoUpdateInfo(repo, key, value);\r\n    });\r\n}\r\nfunction repoUpdateInfo(repo, pathString, value) {\r\n    const path = new Path('/.info/' + pathString);\r\n    const newNode = nodeFromJSON(value);\r\n    repo.infoData_.updateSnapshot(path, newNode);\r\n    const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n}\r\nfunction repoGetNextWriteId(repo) {\r\n    return repo.nextWriteId_++;\r\n}\r\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will try to\r\n * establish a connection and request the value for `query`. If\r\n * the client is not able to retrieve the query result, it reports\r\n * an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\r\nfunction repoGetValue(repo, query) {\r\n    // Only active queries are cached. There is no persisted cache.\r\n    const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\r\n    if (cached != null) {\r\n        return Promise.resolve(cached);\r\n    }\r\n    return repo.server_.get(query).then(payload => {\r\n        const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\r\n        const events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\r\n        eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n        return Promise.resolve(node);\r\n    }, err => {\r\n        repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\r\n        return Promise.reject(new Error(err));\r\n    });\r\n}\r\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\r\n    repoLog(repo, 'set', {\r\n        path: path.toString(),\r\n        value: newVal,\r\n        priority: newPriority\r\n    });\r\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n    // (b) store unresolved paths on JSON parse\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\r\n    const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\r\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\r\n    const writeId = repoGetNextWriteId(repo);\r\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\r\n    eventQueueQueueEvents(repo.eventQueue_, events);\r\n    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {\r\n        const success = status === 'ok';\r\n        if (!success) {\r\n            warn('set at ' + path + ' failed: ' + status);\r\n        }\r\n        const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n    const affectedPath = repoAbortTransactions(repo, path);\r\n    repoRerunTransactions(repo, affectedPath);\r\n    // We queued the events above, so just flush the queue here\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\r\n}\r\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\r\n    repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\r\n    // Start with our existing data and merge each child into it.\r\n    let empty = true;\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const changedChildren = {};\r\n    each(childrenToMerge, (changedKey, changedValue) => {\r\n        empty = false;\r\n        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\r\n    });\r\n    if (!empty) {\r\n        const writeId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\r\n        eventQueueQueueEvents(repo.eventQueue_, events);\r\n        repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n            const success = status === 'ok';\r\n            if (!success) {\r\n                warn('update at ' + path + ' failed: ' + status);\r\n            }\r\n            const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n            const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\r\n            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n        });\r\n        each(childrenToMerge, (changedPath) => {\r\n            const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\r\n            repoRerunTransactions(repo, affectedPath);\r\n        });\r\n        // We queued the events above, so just flush the queue here\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\r\n    }\r\n    else {\r\n        log(\"update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n    }\r\n}\r\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\r\nfunction repoRunOnDisconnectEvents(repo) {\r\n    repoLog(repo, 'onDisconnectEvents');\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const resolvedOnDisconnectTree = newSparseSnapshotTree();\r\n    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\r\n        const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\r\n        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\r\n    });\r\n    let events = [];\r\n    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\r\n        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\r\n        const affectedPath = repoAbortTransactions(repo, path);\r\n        repoRerunTransactions(repo, affectedPath);\r\n    });\r\n    repo.onDisconnect_ = newSparseSnapshotTree();\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\r\n}\r\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\r\n    repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeForget(repo.onDisconnect_, path);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\r\n    const newNode = nodeFromJSON(value);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\r\n    const newNode = nodeFromJSON(value, priority);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\r\n    if (isEmpty(childrenToMerge)) {\r\n        log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n        return;\r\n    }\r\n    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            each(childrenToMerge, (childName, childNode) => {\r\n                const newChildNode = nodeFromJSON(childNode);\r\n                sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\r\n            });\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\r\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n    // a little bit by handling the return values anyways.\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoInterrupt(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoResume(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.resume(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoLog(repo, ...varArgs) {\r\n    let prefix = '';\r\n    if (repo.persistentConnection_) {\r\n        prefix = repo.persistentConnection_.id + ':';\r\n    }\r\n    log(prefix, ...varArgs);\r\n}\r\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\r\n    if (callback) {\r\n        exceptionGuard(() => {\r\n            if (status === 'ok') {\r\n                callback(null);\r\n            }\r\n            else {\r\n                const code = (status || 'error').toUpperCase();\r\n                let message = code;\r\n                if (errorReason) {\r\n                    message += ': ' + errorReason;\r\n                }\r\n                const error = new Error(message);\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                error.code = code;\r\n                callback(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\r\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\r\n    repoLog(repo, 'transaction on ' + path);\r\n    // Initialize transaction.\r\n    const transaction = {\r\n        path,\r\n        update: transactionUpdate,\r\n        onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out\r\n        // which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    const currentState = repoGetLatestState(repo, path, undefined);\r\n    transaction.currentInputSnapshot = currentState;\r\n    const newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            transaction.onComplete(null, false, transaction.currentInputSnapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = 0 /* RUN */;\r\n        const queueNode = treeSubTree(repo.transactionQueueTree_, path);\r\n        const nodeQueue = treeGetValue(queueNode) || [];\r\n        nodeQueue.push(transaction);\r\n        treeSetValue(queueNode, nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our\r\n        // transaction state, since the user could start new transactions from the\r\n        // event callbacks.\r\n        let priorityForNode;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            contains(newVal, '.priority')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            priorityForNode = safeGet(newVal, '.priority');\r\n            assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        const serverValues = repoGenerateServerValues(repo);\r\n        const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\r\n        const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n    }\r\n}\r\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\r\nfunction repoGetLatestState(repo, path, excludeSets) {\r\n    return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n}\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\r\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        repoPruneCompletedTransactionsBelowNode(repo, node);\r\n    }\r\n    if (treeGetValue(node)) {\r\n        const queue = repoBuildTransactionQueue(repo, node);\r\n        assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        const allRun = queue.every((transaction) => transaction.status === 0 /* RUN */);\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            repoSendTransactionQueue(repo, treeGetPath(node), queue);\r\n        }\r\n    }\r\n    else if (treeHasChildren(node)) {\r\n        treeForEachChild(node, childNode => {\r\n            repoSendReadyTransactions(repo, childNode);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\r\nfunction repoSendTransactionQueue(repo, path, queue) {\r\n    // Mark transactions as sent and increment retry count!\r\n    const setsToIgnore = queue.map(txn => {\r\n        return txn.currentWriteId;\r\n    });\r\n    const latestState = repoGetLatestState(repo, path, setsToIgnore);\r\n    let snapToSend = latestState;\r\n    const latestHash = latestState.hash();\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const txn = queue[i];\r\n        assert(txn.status === 0 /* RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = 1 /* SENT */;\r\n        txn.retryCount++;\r\n        const relativePath = newRelativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    const dataToSend = snapToSend.val(true);\r\n    const pathToSend = path;\r\n    // Send the put.\r\n    repo.server_.put(pathToSend.toString(), dataToSend, (status) => {\r\n        repoLog(repo, 'transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status\r\n        });\r\n        let events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our\r\n            // transaction state, since the callback could trigger more\r\n            // transactions or sets.\r\n            const callbacks = [];\r\n            for (let i = 0; i < queue.length; i++) {\r\n                queue[i].status = 2 /* COMPLETED */;\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this\r\n                    // transaction is complete, it should be set\r\n                    callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\r\n            // There may be pending transactions that we can now send.\r\n            repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (let i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) {\r\n                        queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    }\r\n                    else {\r\n                        queue[i].status = 0 /* RUN */;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            repoRerunTransactions(repo, path);\r\n        }\r\n    }, latestHash);\r\n}\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\r\nfunction repoRerunTransactions(repo, changedPath) {\r\n    const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\r\n    const path = treeGetPath(rootMostTransactionNode);\r\n    const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\r\n    repoRerunTransactionQueue(repo, queue, path);\r\n    return path;\r\n}\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\r\nfunction repoRerunTransactionQueue(repo, queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our\r\n    // transaction state, since the callback could trigger more transactions or\r\n    // sets.\r\n    const callbacks = [];\r\n    let events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    const txnsToRerun = queue.filter(q => {\r\n        return q.status === 0 /* RUN */;\r\n    });\r\n    const setsToIgnore = txnsToRerun.map(q => {\r\n        return q.currentWriteId;\r\n    });\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const transaction = queue[i];\r\n        const relativePath = newRelativePath(path, transaction.path);\r\n        let abortTransaction = false, abortReason;\r\n        assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === 4 /* NEEDS_ABORT */) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === 0 /* RUN */) {\r\n            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                const newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    let newDataNode = nodeFromJSON(newData);\r\n                    const hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    const oldWriteId = transaction.currentWriteId;\r\n                    const serverValues = repoGenerateServerValues(repo);\r\n                    const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = repoGetNextWriteId(repo);\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = 2 /* COMPLETED */;\r\n            // Removing a listener can trigger pruning which can muck with\r\n            // mergedData/visibleData (as it prunes data). So defer the unwatcher\r\n            // until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (let i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n}\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\r\nfunction repoGetAncestorTransactionNode(repo, path) {\r\n    let front;\r\n    // Start at the root and walk deeper into the tree towards path until we\r\n    // find a node with pending transactions.\r\n    let transactionNode = repo.transactionQueueTree_;\r\n    front = pathGetFront(path);\r\n    while (front !== null && treeGetValue(transactionNode) === undefined) {\r\n        transactionNode = treeSubTree(transactionNode, front);\r\n        path = pathPopFront(path);\r\n        front = pathGetFront(path);\r\n    }\r\n    return transactionNode;\r\n}\r\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\r\nfunction repoBuildTransactionQueue(repo, transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    const transactionQueue = [];\r\n    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort((a, b) => a.order - b.order);\r\n    return transactionQueue;\r\n}\r\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\r\n    const nodeQueue = treeGetValue(node);\r\n    if (nodeQueue) {\r\n        for (let i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    treeForEachChild(node, child => {\r\n        repoAggregateTransactionQueuesForNode(repo, child, queue);\r\n    });\r\n}\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\r\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        let to = 0;\r\n        for (let from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== 2 /* COMPLETED */) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        treeSetValue(node, queue.length > 0 ? queue : undefined);\r\n    }\r\n    treeForEachChild(node, childNode => {\r\n        repoPruneCompletedTransactionsBelowNode(repo, childNode);\r\n    });\r\n}\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\r\nfunction repoAbortTransactions(repo, path) {\r\n    const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\r\n    const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\r\n    treeForEachAncestor(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    repoAbortTransactionsOnNode(repo, transactionNode);\r\n    treeForEachDescendant(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    return affectedPath;\r\n}\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\r\nfunction repoAbortTransactionsOnNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our\r\n        // transaction state, since the callback could trigger more transactions\r\n        // or sets.\r\n        const callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for\r\n        // abort, while the unsent ones can be immediately aborted and removed.\r\n        let events = [];\r\n        let lastSent = -1;\r\n        for (let i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) ;\r\n            else if (queue[i].status === 1 /* SENT */) {\r\n                assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = 3 /* SENT_NEEDS_ABORT */;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                assert(queue[i].status === 0 /* RUN */, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            treeSetValue(node, undefined);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\r\n        for (let i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction decodePath(pathString) {\r\n    let pathStringDecoded = '';\r\n    const pieces = pathString.split('/');\r\n    for (let i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            let piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @returns key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    const results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (const segment of queryString.split('&')) {\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        const kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(`Invalid query segment '${segment}' in query '${queryString}'`);\r\n        }\r\n    }\r\n    return results;\r\n}\r\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\r\n    const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\r\n    if (parsedUrl.domain === 'firebase.com') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace === 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, \r\n        /*persistenceKey=*/ '', \r\n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\nconst parseDatabaseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    let host = '', domain = '', subdomain = '', pathString = '', namespace = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    let secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        let colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        let slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        let questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = host.length;\r\n        }\r\n        const hostWithoutPort = host.slice(0, colonInd);\r\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        else if (hostWithoutPort.split('.').length <= 2) {\r\n            domain = hostWithoutPort;\r\n        }\r\n        else {\r\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\r\n            const dotInd = host.indexOf('.');\r\n            subdomain = host.substring(0, dotInd).toLowerCase();\r\n            domain = host.substring(dotInd + 1);\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            namespace = subdomain;\r\n        }\r\n        // Always treat the value of the `ns` as the namespace name if it is present.\r\n        if ('ns' in queryParams) {\r\n            namespace = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host,\r\n        port,\r\n        domain,\r\n        subdomain,\r\n        secure,\r\n        scheme,\r\n        pathString,\r\n        namespace\r\n    };\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\r\nclass DataEvent {\r\n    /**\r\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param eventRegistration - The function to call to with the event data. User provided\r\n     * @param snapshot - The data backing the event\r\n     * @param prevName - Optional, the name of the previous child for child_* events.\r\n     */\r\n    constructor(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    getPath() {\r\n        const ref = this.snapshot.ref;\r\n        if (this.eventType === 'value') {\r\n            return ref._path;\r\n        }\r\n        else {\r\n            return ref.parent._path;\r\n        }\r\n    }\r\n    getEventType() {\r\n        return this.eventType;\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            stringify(this.snapshot.exportVal()));\r\n    }\r\n}\r\nclass CancelEvent {\r\n    constructor(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    getPath() {\r\n        return this.path;\r\n    }\r\n    getEventType() {\r\n        return 'cancel';\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return this.path.toString() + ':cancel';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\r\nclass CallbackContext {\r\n    constructor(snapshotCallback, cancelCallback) {\r\n        this.snapshotCallback = snapshotCallback;\r\n        this.cancelCallback = cancelCallback;\r\n    }\r\n    onValue(expDataSnapshot, previousChildName) {\r\n        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\r\n    }\r\n    onCancel(error) {\r\n        assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\r\n        return this.cancelCallback.call(null, error);\r\n    }\r\n    get hasCancelCallback() {\r\n        return !!this.cancelCallback;\r\n    }\r\n    matches(other) {\r\n        return (this.snapshotCallback === other.snapshotCallback ||\r\n            (this.snapshotCallback.userCallback !== undefined &&\r\n                this.snapshotCallback.userCallback ===\r\n                    other.snapshotCallback.userCallback &&\r\n                this.snapshotCallback.context === other.snapshotCallback.context));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\r\nclass OnDisconnect {\r\n    /** @hideconstructor */\r\n    constructor(_repo, _path) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n    }\r\n    /**\r\n     * Cancels all previously queued `onDisconnect()` set or update events for this\r\n     * location and all children.\r\n     *\r\n     * If a write has been queued for this location via a `set()` or `update()` at a\r\n     * parent location, the write at this location will be canceled, though writes\r\n     * to sibling locations will still occur.\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    cancel() {\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is deleted when the client is disconnected\r\n     * (due to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    remove() {\r\n        validateWritablePath('OnDisconnect.remove', this._path);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value when the\r\n     * client is disconnected (due to closing the browser, navigating to a new page,\r\n     * or network issues).\r\n     *\r\n     * `set()` is especially useful for implementing \"presence\" systems, where a\r\n     * value should be changed or cleared when a user disconnects so that they\r\n     * appear \"offline\" to other users. See\r\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n     * for more information.\r\n     *\r\n     * Note that `onDisconnect` operations are only triggered once. If you want an\r\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n     * the `onDisconnect` operations each time.\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    set(value) {\r\n        validateWritablePath('OnDisconnect.set', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value and priority\r\n     * when the client is disconnected (due to closing the browser, navigating to a\r\n     * new page, or network issues).\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @param priority - The priority to be written (string, number, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    setWithPriority(value, priority) {\r\n        validateWritablePath('OnDisconnect.setWithPriority', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\r\n        validatePriority('OnDisconnect.setWithPriority', priority, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Writes multiple values at this location when the client is disconnected (due\r\n     * to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * The `values` argument contains multiple property-value pairs that will be\r\n     * written to the Database together. Each child property can either be a simple\r\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n     * from the current location to the data to update.\r\n     *\r\n     * As opposed to the `set()` method, `update()` can be use to selectively update\r\n     * only the referenced properties at the current location (instead of replacing\r\n     * all the child properties at the current location).\r\n     *\r\n     * @param values - Object containing multiple values.\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    update(values) {\r\n        validateWritablePath('OnDisconnect.update', this._path);\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nclass QueryImpl {\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(_repo, _path, _queryParams, _orderByCalled) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n        this._queryParams = _queryParams;\r\n        this._orderByCalled = _orderByCalled;\r\n    }\r\n    get key() {\r\n        if (pathIsEmpty(this._path)) {\r\n            return null;\r\n        }\r\n        else {\r\n            return pathGetBack(this._path);\r\n        }\r\n    }\r\n    get ref() {\r\n        return new ReferenceImpl(this._repo, this._path);\r\n    }\r\n    get _queryIdentifier() {\r\n        const obj = queryParamsGetQueryObject(this._queryParams);\r\n        const id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    }\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     */\r\n    get _queryObject() {\r\n        return queryParamsGetQueryObject(this._queryParams);\r\n    }\r\n    isEqual(other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof QueryImpl)) {\r\n            return false;\r\n        }\r\n        const sameRepo = this._repo === other._repo;\r\n        const samePath = pathEquals(this._path, other._path);\r\n        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    }\r\n    toJSON() {\r\n        return this.toString();\r\n    }\r\n    toString() {\r\n        return this._repo.toString() + pathToUrlEncodedString(this._path);\r\n    }\r\n}\r\n/**\r\n * Validates that no other order by call has been made\r\n */\r\nfunction validateNoPreviousOrderByCall(query, fnName) {\r\n    if (query._orderByCalled === true) {\r\n        throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n    }\r\n}\r\n/**\r\n * Validates start/end values for queries.\r\n */\r\nfunction validateQueryEndpoints(params) {\r\n    let startNode = null;\r\n    let endNode = null;\r\n    if (params.hasStart()) {\r\n        startNode = params.getIndexStartValue();\r\n    }\r\n    if (params.hasEnd()) {\r\n        endNode = params.getIndexEndValue();\r\n    }\r\n    if (params.getIndex() === KEY_INDEX) {\r\n        const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n            'startAt(), endAt(), or equalTo().';\r\n        const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\r\n            'endAt(), endBefore(), or equalTo() must be a string.';\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            if (startName !== MIN_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof startNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            if (endName !== MAX_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof endNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n    }\r\n    else if (params.getIndex() === PRIORITY_INDEX) {\r\n        if ((startNode != null && !isValidPriority(startNode)) ||\r\n            (endNode != null && !isValidPriority(endNode))) {\r\n            throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\r\n                '(null, a number, or a string).');\r\n        }\r\n    }\r\n    else {\r\n        assert(params.getIndex() instanceof PathIndex ||\r\n            params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n        if ((startNode != null && typeof startNode === 'object') ||\r\n            (endNode != null && typeof endNode === 'object')) {\r\n            throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\r\n                'equalTo() cannot be an object.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\r\nfunction validateLimit(params) {\r\n    if (params.hasStart() &&\r\n        params.hasEnd() &&\r\n        params.hasLimit() &&\r\n        !params.hasAnchoredLimit()) {\r\n        throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\r\n            'limitToFirst() or limitToLast() instead.');\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass ReferenceImpl extends QueryImpl {\r\n    /** @hideconstructor */\r\n    constructor(repo, path) {\r\n        super(repo, path, new QueryParams(), false);\r\n    }\r\n    get parent() {\r\n        const parentPath = pathParent(this._path);\r\n        return parentPath === null\r\n            ? null\r\n            : new ReferenceImpl(this._repo, parentPath);\r\n    }\r\n    get root() {\r\n        let ref = this;\r\n        while (ref.parent !== null) {\r\n            ref = ref.parent;\r\n        }\r\n        return ref;\r\n    }\r\n}\r\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\r\nclass DataSnapshot {\r\n    /**\r\n     * @param _node - A SnapshotNode to wrap.\r\n     * @param ref - The location this snapshot came from.\r\n     * @param _index - The iteration order for this snapshot\r\n     * @hideconstructor\r\n     */\r\n    constructor(_node, \r\n    /**\r\n     * The location of this DataSnapshot.\r\n     */\r\n    ref, _index) {\r\n        this._node = _node;\r\n        this.ref = ref;\r\n        this._index = _index;\r\n    }\r\n    /**\r\n     * Gets the priority value of the data in this `DataSnapshot`.\r\n     *\r\n     * Applications need not use priority but can order collections by\r\n     * ordinary properties (see\r\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n     * ).\r\n     */\r\n    get priority() {\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this._node.getPriority().val();\r\n    }\r\n    /**\r\n     * The key (last part of the path) of the location of this `DataSnapshot`.\r\n     *\r\n     * The last token in a Database location is considered its key. For example,\r\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n     * `DataSnapshot` will return the key for the location that generated it.\r\n     * However, accessing the key on the root URL of a Database will return\r\n     * `null`.\r\n     */\r\n    get key() {\r\n        return this.ref.key;\r\n    }\r\n    /** Returns the number of child properties of this `DataSnapshot`. */\r\n    get size() {\r\n        return this._node.numChildren();\r\n    }\r\n    /**\r\n     * Gets another `DataSnapshot` for the location at the specified relative path.\r\n     *\r\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n     * another `DataSnapshot` for the location at the specified relative path. The\r\n     * relative path can either be a simple child name (for example, \"ada\") or a\r\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n     * whose value is `null`) is returned.\r\n     *\r\n     * @param path - A relative path to the location of child data.\r\n     */\r\n    child(path) {\r\n        const childPath = new Path(path);\r\n        const childRef = child(this.ref, path);\r\n        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    }\r\n    /**\r\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n     * efficient than using `snapshot.val() !== null`.\r\n     */\r\n    exists() {\r\n        return !this._node.isEmpty();\r\n    }\r\n    /**\r\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n     *\r\n     * The `exportVal()` method is similar to `val()`, except priority information\r\n     * is included (if available), making it suitable for backing up your data.\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    exportVal() {\r\n        return this._node.val(true);\r\n    }\r\n    /**\r\n     * Enumerates the top-level children in the `DataSnapshot`.\r\n     *\r\n     * Because of the way JavaScript objects work, the ordering of data in the\r\n     * JavaScript object returned by `val()` is not guaranteed to match the\r\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n     * where `forEach()` comes in handy. It guarantees the children of a\r\n     * `DataSnapshot` will be iterated in their query order.\r\n     *\r\n     * If no explicit `orderBy*()` method is used, results are returned\r\n     * ordered by key (unless priorities are used, in which case, results are\r\n     * returned by priority).\r\n     *\r\n     * @param action - A function that will be called for each child DataSnapshot.\r\n     * The callback can return true to cancel further enumeration.\r\n     * @returns true if enumeration was canceled due to your callback returning\r\n     * true.\r\n     */\r\n    forEach(action) {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        const childrenNode = this._node;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this._index, (key, node) => {\r\n            return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\r\n        });\r\n    }\r\n    /**\r\n     * Returns true if the specified child path has (non-null) data.\r\n     *\r\n     * @param path - A relative path to the location of a potential child.\r\n     * @returns `true` if data exists at the specified child path; else\r\n     *  `false`.\r\n     */\r\n    hasChild(path) {\r\n        const childPath = new Path(path);\r\n        return !this._node.getChild(childPath).isEmpty();\r\n    }\r\n    /**\r\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n     * properties.\r\n     *\r\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n     * children. If it does, you can enumerate them using `forEach()`. If it\r\n     * doesn't, then either this snapshot contains a primitive value (which can be\r\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n     * `null`).\r\n     *\r\n     * @returns true if this snapshot has any children; else false.\r\n     */\r\n    hasChildren() {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return !this._node.isEmpty();\r\n        }\r\n    }\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     */\r\n    toJSON() {\r\n        return this.exportVal();\r\n    }\r\n    /**\r\n     * Extracts a JavaScript value from a `DataSnapshot`.\r\n     *\r\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n     * scalar type (string, number, or boolean), an array, or an object. It may\r\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n     * data).\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    val() {\r\n        return this._node.val();\r\n    }\r\n}\r\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\r\nfunction ref(db, path) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('ref');\r\n    return path !== undefined ? child(db._root, path) : db._root;\r\n}\r\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\r\nfunction refFromURL(db, url) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('refFromURL');\r\n    const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\r\n    validateUrl('refFromURL', parsedURL);\r\n    const repoInfo = parsedURL.repoInfo;\r\n    if (!db._repo.repoInfo_.isCustomHost() &&\r\n        repoInfo.host !== db._repo.repoInfo_.host) {\r\n        fatal('refFromURL' +\r\n            ': Host name does not match the current database: ' +\r\n            '(found ' +\r\n            repoInfo.host +\r\n            ' but expected ' +\r\n            db._repo.repoInfo_.host +\r\n            ')');\r\n    }\r\n    return ref(db, parsedURL.path.toString());\r\n}\r\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\r\nfunction child(parent, path) {\r\n    parent = getModularInstance(parent);\r\n    if (pathGetFront(parent._path) === null) {\r\n        validateRootPathString('child', 'path', path, false);\r\n    }\r\n    else {\r\n        validatePathString('child', 'path', path, false);\r\n    }\r\n    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\r\n}\r\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\r\nfunction onDisconnect(ref) {\r\n    ref = getModularInstance(ref);\r\n    return new OnDisconnect(ref._repo, ref._path);\r\n}\r\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\r\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\r\nfunction push(parent, value) {\r\n    parent = getModularInstance(parent);\r\n    validateWritablePath('push', parent._path);\r\n    validateFirebaseDataArg('push', value, parent._path, true);\r\n    const now = repoServerTime(parent._repo);\r\n    const name = nextPushId(now);\r\n    // push() returns a ThennableReference whose promise is fulfilled with a\r\n    // regular Reference. We use child() to create handles to two different\r\n    // references. The first is turned into a ThennableReference below by adding\r\n    // then() and catch() methods and is used as the return value of push(). The\r\n    // second remains a regular Reference and is used as the fulfilled value of\r\n    // the first ThennableReference.\r\n    const thennablePushRef = child(parent, name);\r\n    const pushRef = child(parent, name);\r\n    let promise;\r\n    if (value != null) {\r\n        promise = set(pushRef, value).then(() => pushRef);\r\n    }\r\n    else {\r\n        promise = Promise.resolve(pushRef);\r\n    }\r\n    thennablePushRef.then = promise.then.bind(promise);\r\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n    return thennablePushRef;\r\n}\r\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\r\nfunction remove(ref) {\r\n    validateWritablePath('remove', ref._path);\r\n    return set(ref, null);\r\n}\r\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction set(ref, value) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('set', ref._path);\r\n    validateFirebaseDataArg('set', value, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, \r\n    /*priority=*/ null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setPriority(ref, priority) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('setPriority', ref._path);\r\n    validatePriority('setPriority', priority, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setWithPriority(ref, value, priority) {\r\n    validateWritablePath('setWithPriority', ref._path);\r\n    validateFirebaseDataArg('setWithPriority', value, ref._path, false);\r\n    validatePriority('setWithPriority', priority, false);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\r\n    }\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\r\nfunction update(ref, values) {\r\n    validateFirebaseMergeDataArg('update', values, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\r\nfunction get(query) {\r\n    query = getModularInstance(query);\r\n    return repoGetValue(query._repo, query).then(node => {\r\n        return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\r\n    });\r\n}\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nclass ValueEventRegistration {\r\n    constructor(callbackContext) {\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        return eventType === 'value';\r\n    }\r\n    createEvent(change, query) {\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, null);\r\n        }\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callbackContext || !this.callbackContext) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return other.callbackContext.matches(this.callbackContext);\r\n        }\r\n    }\r\n    hasAnyCallback() {\r\n        return this.callbackContext !== null;\r\n    }\r\n}\r\n/**\r\n * Represents the registration of a child_x event.\r\n */\r\nclass ChildEventRegistration {\r\n    constructor(eventType, callbackContext) {\r\n        this.eventType = eventType;\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return this.eventType === eventToCheck;\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    createEvent(change, query) {\r\n        assert(change.childName != null, 'Child events should have a childName.');\r\n        const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            return (this.eventType === other.eventType &&\r\n                (!this.callbackContext ||\r\n                    !other.callbackContext ||\r\n                    this.callbackContext.matches(other.callbackContext)));\r\n        }\r\n        return false;\r\n    }\r\n    hasAnyCallback() {\r\n        return !!this.callbackContext;\r\n    }\r\n}\r\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\r\n    let cancelCallback;\r\n    if (typeof cancelCallbackOrListenOptions === 'object') {\r\n        cancelCallback = undefined;\r\n        options = cancelCallbackOrListenOptions;\r\n    }\r\n    if (typeof cancelCallbackOrListenOptions === 'function') {\r\n        cancelCallback = cancelCallbackOrListenOptions;\r\n    }\r\n    if (options && options.onlyOnce) {\r\n        const userCallback = callback;\r\n        const onceCallback = (dataSnapshot, previousChildName) => {\r\n            repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n            userCallback(dataSnapshot, previousChildName);\r\n        };\r\n        onceCallback.userCallback = callback.userCallback;\r\n        onceCallback.context = callback.context;\r\n        callback = onceCallback;\r\n    }\r\n    const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\r\n    const container = eventType === 'value'\r\n        ? new ValueEventRegistration(callbackContext)\r\n        : new ChildEventRegistration(eventType, callbackContext);\r\n    repoAddEventCallbackForQuery(query._repo, query, container);\r\n    return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\n/**\r\n * Detaches a callback previously attached with `on()`.\r\n *\r\n * Detach a callback previously attached with `on()`. Note that if `on()` was\r\n * called multiple times with the same eventType and callback, the callback\r\n * will be called multiple times for each event, and `off()` must be called\r\n * multiple times to remove the callback. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\r\nfunction off(query, eventType, callback) {\r\n    let container = null;\r\n    const expCallback = callback ? new CallbackContext(callback) : null;\r\n    if (eventType === 'value') {\r\n        container = new ValueEventRegistration(expCallback);\r\n    }\r\n    else if (eventType) {\r\n        container = new ChildEventRegistration(eventType, expCallback);\r\n    }\r\n    repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\r\nclass QueryConstraint {\r\n}\r\nclass QueryEndAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endAt', this._value, query._path, true);\r\n        const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endAt: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\r\nfunction endAt(value, key) {\r\n    validateKey('endAt', 'key', key, true);\r\n    return new QueryEndAtConstraint(value, key);\r\n}\r\nclass QueryEndBeforeConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endBefore', this._value, query._path, false);\r\n        const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value lesss than or equal\r\n * to the specified value and a a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction endBefore(value, key) {\r\n    validateKey('endBefore', 'key', key, true);\r\n    return new QueryEndBeforeConstraint(value, key);\r\n}\r\nclass QueryStartAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAt', this._value, query._path, true);\r\n        const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAt: Starting point was already set (by another call to startAt, ' +\r\n                'startBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAt(value = null, key) {\r\n    validateKey('startAt', 'key', key, true);\r\n    return new QueryStartAtConstraint(value, key);\r\n}\r\nclass QueryStartAfterConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAfter', this._value, query._path, false);\r\n        const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +\r\n                'startAfter, or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAfter(value, key) {\r\n    validateKey('startAfter', 'key', key, true);\r\n    return new QueryStartAfterConstraint(value, key);\r\n}\r\nclass QueryLimitToFirstConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToFirst(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToFirst: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToFirstConstraint(limit);\r\n}\r\nclass QueryLimitToLastConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToLast(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToLast: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToLastConstraint(limit);\r\n}\r\nclass QueryOrderByChildConstraint extends QueryConstraint {\r\n    constructor(_path) {\r\n        super();\r\n        this._path = _path;\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByChild');\r\n        const parsedPath = new Path(this._path);\r\n        if (pathIsEmpty(parsedPath)) {\r\n            throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\r\n        }\r\n        const index = new PathIndex(parsedPath);\r\n        const newParams = queryParamsOrderBy(query._queryParams, index);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\r\nfunction orderByChild(path) {\r\n    if (path === '$key') {\r\n        throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\r\n    }\r\n    else if (path === '$priority') {\r\n        throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\r\n    }\r\n    else if (path === '$value') {\r\n        throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\r\n    }\r\n    validatePathString('orderByChild', 'path', path, false);\r\n    return new QueryOrderByChildConstraint(path);\r\n}\r\nclass QueryOrderByKeyConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByKey');\r\n        const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByKey() {\r\n    return new QueryOrderByKeyConstraint();\r\n}\r\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByPriority');\r\n        const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\r\nfunction orderByPriority() {\r\n    return new QueryOrderByPriorityConstraint();\r\n}\r\nclass QueryOrderByValueConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByValue');\r\n        const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByValue() {\r\n    return new QueryOrderByValueConstraint();\r\n}\r\nclass QueryEqualToValueConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('equalTo', this._value, query._path, false);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\r\n                'equalTo).');\r\n        }\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\r\n                'equalTo).');\r\n        }\r\n        return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction equalTo(value, key) {\r\n    validateKey('equalTo', 'key', key, true);\r\n    return new QueryEqualToValueConstraint(value, key);\r\n}\r\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\r\nfunction query(query, ...queryConstraints) {\r\n    let queryImpl = getModularInstance(query);\r\n    for (const constraint of queryConstraints) {\r\n        queryImpl = constraint._apply(queryImpl);\r\n    }\r\n    return queryImpl;\r\n}\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nsyncPointSetReferenceConstructor(ReferenceImpl);\r\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\r\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\r\n/**\r\n * Creates and caches `Repo` instances.\r\n */\r\nconst repos = {};\r\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\r\nlet useRestClient = false;\r\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\r\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\r\n    repo.repoInfo_ = new RepoInfo(`${host}:${port}`, \r\n    /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);\r\n    if (tokenProvider) {\r\n        repo.authTokenProvider_ = tokenProvider;\r\n    }\r\n}\r\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\r\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\r\n    let dbUrl = url || app.options.databaseURL;\r\n    if (dbUrl === undefined) {\r\n        if (!app.options.projectId) {\r\n            fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\r\n                ' a Project ID when calling firebase.initializeApp().');\r\n        }\r\n        log('Using default host for project ', app.options.projectId);\r\n        dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\r\n    }\r\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n    let repoInfo = parsedUrl.repoInfo;\r\n    let isEmulator;\r\n    let dbEmulatorHost = undefined;\r\n    if (typeof process !== 'undefined' && process.env) {\r\n        dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\r\n    }\r\n    if (dbEmulatorHost) {\r\n        isEmulator = true;\r\n        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\r\n        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n        repoInfo = parsedUrl.repoInfo;\r\n    }\r\n    else {\r\n        isEmulator = !parsedUrl.repoInfo.secure;\r\n    }\r\n    const authTokenProvider = nodeAdmin && isEmulator\r\n        ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\r\n        : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\r\n    validateUrl('Invalid Firebase Database URL', parsedUrl);\r\n    if (!pathIsEmpty(parsedUrl.path)) {\r\n        fatal('Database URL must point to the root of a Firebase Database ' +\r\n            '(not including a child path).');\r\n    }\r\n    const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\r\n    return new Database(repo, app);\r\n}\r\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\r\nfunction repoManagerDeleteRepo(repo, appName) {\r\n    const appRepos = repos[appName];\r\n    // This should never happen...\r\n    if (!appRepos || appRepos[repo.key] !== repo) {\r\n        fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\r\n    }\r\n    repoInterrupt(repo);\r\n    delete appRepos[repo.key];\r\n}\r\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\r\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\r\n    let appRepos = repos[app.name];\r\n    if (!appRepos) {\r\n        appRepos = {};\r\n        repos[app.name] = appRepos;\r\n    }\r\n    let repo = appRepos[repoInfo.toURLString()];\r\n    if (repo) {\r\n        fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n    }\r\n    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\r\n    appRepos[repoInfo.toURLString()] = repo;\r\n    return repo;\r\n}\r\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\r\nfunction repoManagerForceRestClient(forceRestClient) {\r\n    useRestClient = forceRestClient;\r\n}\r\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\r\nclass Database {\r\n    /** @hideconstructor */\r\n    constructor(_repoInternal, \r\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\r\n    app) {\r\n        this._repoInternal = _repoInternal;\r\n        this.app = app;\r\n        /** Represents a `Database` instance. */\r\n        this['type'] = 'database';\r\n        /** Track if the instance has been used (root or repo accessed) */\r\n        this._instanceStarted = false;\r\n    }\r\n    get _repo() {\r\n        if (!this._instanceStarted) {\r\n            repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\r\n            this._instanceStarted = true;\r\n        }\r\n        return this._repoInternal;\r\n    }\r\n    get _root() {\r\n        if (!this._rootInternal) {\r\n            this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\r\n        }\r\n        return this._rootInternal;\r\n    }\r\n    _delete() {\r\n        if (this._rootInternal !== null) {\r\n            repoManagerDeleteRepo(this._repo, this.app.name);\r\n            this._repoInternal = null;\r\n            this._rootInternal = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _checkNotDeleted(apiName) {\r\n        if (this._rootInternal === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    }\r\n}\r\nfunction checkTransportInit() {\r\n    if (TransportManager.IS_TRANSPORT_INITIALIZED) {\r\n        warn('Transport has already been initialized. Please call this function before calling ref or setting up a listener');\r\n    }\r\n}\r\n/**\r\n * Force the use of websockets instead of longPolling.\r\n */\r\nfunction forceWebSockets() {\r\n    checkTransportInit();\r\n    BrowserPollConnection.forceDisallow();\r\n}\r\n/**\r\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\r\n */\r\nfunction forceLongPolling() {\r\n    checkTransportInit();\r\n    WebSocketConnection.forceDisallow();\r\n    BrowserPollConnection.forceAllow();\r\n}\r\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\r\nfunction getDatabase(app = getApp(), url) {\r\n    return _getProvider(app, 'database').getImmediate({\r\n        identifier: url\r\n    });\r\n}\r\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\r\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('useEmulator');\r\n    if (db._instanceStarted) {\r\n        fatal('Cannot call useEmulator() after instance has already been initialized.');\r\n    }\r\n    const repo = db._repoInternal;\r\n    let tokenProvider = undefined;\r\n    if (repo.repoInfo_.nodeAdmin) {\r\n        if (options.mockUserToken) {\r\n            fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\r\n        }\r\n        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\r\n    }\r\n    else if (options.mockUserToken) {\r\n        const token = typeof options.mockUserToken === 'string'\r\n            ? options.mockUserToken\r\n            : createMockUserToken(options.mockUserToken, db.app.options.projectId);\r\n        tokenProvider = new EmulatorTokenProvider(token);\r\n    }\r\n    // Modify the repo to apply emulator settings\r\n    repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\r\n}\r\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\r\nfunction goOffline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOffline');\r\n    repoInterrupt(db._repo);\r\n}\r\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\r\nfunction goOnline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOnline');\r\n    repoResume(db._repo);\r\n}\r\nfunction enableLogging(logger, persistent) {\r\n    enableLogging$1(logger, persistent);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerDatabase(variant) {\r\n    setSDKVersion(SDK_VERSION$1);\r\n    _registerComponent(new Component('database', (container, { instanceIdentifier: url }) => {\r\n        const app = container.getProvider('app').getImmediate();\r\n        const authProvider = container.getProvider('auth-internal');\r\n        const appCheckProvider = container.getProvider('app-check-internal');\r\n        return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\r\n    }, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst SERVER_TIMESTAMP = {\r\n    '.sv': 'timestamp'\r\n};\r\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\r\nfunction serverTimestamp() {\r\n    return SERVER_TIMESTAMP;\r\n}\r\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\r\nfunction increment(delta) {\r\n    return {\r\n        '.sv': {\r\n            'increment': delta\r\n        }\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\r\nclass TransactionResult {\r\n    /** @hideconstructor */\r\n    constructor(\r\n    /** Whether the transaction was successfully committed. */\r\n    committed, \r\n    /** The resulting data snapshot. */\r\n    snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    /** Returns a JSON-serializable representation of this object. */\r\n    toJSON() {\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    }\r\n}\r\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\r\nfunction runTransaction(ref, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ntransactionUpdate, options) {\r\n    var _a;\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('Reference.transaction', ref._path);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw ('Reference.transaction failed: ' + ref.key + ' is a read-only object.');\r\n    }\r\n    const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\r\n    const deferred = new Deferred();\r\n    const promiseComplete = (error, committed, node) => {\r\n        let dataSnapshot = null;\r\n        if (error) {\r\n            deferred.reject(error);\r\n        }\r\n        else {\r\n            dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\r\n            deferred.resolve(new TransactionResult(committed, dataSnapshot));\r\n        }\r\n    };\r\n    // Add a watch to make sure we get server updates.\r\n    const unwatcher = onValue(ref, () => { });\r\n    repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\r\n    return deferred.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nPersistentConnection;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nConnection;\r\n/**\r\n * @internal\r\n */\r\nconst hijackHash = function (newHash) {\r\n    const oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        if (hash !== undefined) {\r\n            hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, onComplete, hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\nRepoInfo;\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\r\nconst forceRestClient = function (forceRestClient) {\r\n    repoManagerForceRestClient(forceRestClient);\r\n};\n\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterDatabase();\n\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, forceLongPolling, forceWebSockets, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };\n//# sourceMappingURL=index.esm2017.js.map\n"],"names":["version","SDK_VERSION","setSDKVersion","DOMStorageWrapper","constructor","domStorage_","this","prefix_","set","key","value","removeItem","prefixedName_","setItem","get","storedVal","getItem","remove","name","toString","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","window","domStorage","e","PersistentStorage","SessionStorage","logClient","LUIDGenerator","id","sha1","str","utf8Bytes","update","sha1Bytes","digest","buildLogMessage_","varArgs","message","i","length","arg","Array","isArray","apply","logger","firstLog_","enableLogging$1","logger_","persistent","logLevel","log","bind","logWrapper","prefix","error","fatal","Error","warn","warnIfPageIsSecure","location","protocol","indexOf","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","executeWhenDOMReady","fn","document","readyState","called","wrappedFn","body","setTimeout","Math","floor","addEventListener","attachEvent","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","hasOwnProperty","doubleToIEEE754String","v","ebits","fbits","bias","s","f","ln","Infinity","abs","pow","min","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","isChromeExtensionContentScript","test","href","isWindowsStoreApp","Windows","UI","errorForServerCode","code","query","reason","_path","toUpperCase","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","intVal","exceptionGuard","stack","beingCrawled","userAgent","search","setTimeoutNonBlocking","time","timeout","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getImmediate","optional","then","getToken","forceRefresh","Promise","resolve","reject","addTokenChangeListener","listener","_a","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","onInit","auth","catch","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","OWNER","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN_RE","LAST_SESSION_PARAM","APPLICATION_ID_PARAM","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","repoInfoNeedsQueryParam","repoInfo","repoInfoConnectionURL","type","params","connURL","pairs","StatsCollection","counters_","incrementCounter","amount","collections","reporters","statsManagerGetCollection","hashString","statsManagerGetOrCreateReporter","creatorFunction","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","callback","handleResponse","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","MAX_URL_DATA_SIZE","SEG_HEADER_SIZE","MAX_PAYLOAD_SIZE","KEEPALIVE_REQUEST_INTERVAL","LP_CONNECT_TIMEOUT","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","open","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","static","forceAllow_","forceDisallow_","createElement","markConnectionHealthy","shutdown_","close","myDisconnFrame","removeChild","send","dataStr","base64data","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","Set","pendingSegs","currentSerial","myIFrame","createIFrame_","script","currentDomain","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","size","theURL","curDataString","nextSeg","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","add","doNewRequest","delete","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript","async","onload","onreadystatechange","rstate","parentNode","onerror","WEBSOCKET_MAX_FRAME_SIZE","WEBSOCKET_KEEPALIVE_INTERVAL","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","options","device","headers","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","oldAndroidRegex","oldAndroidMatch","match","parseFloat","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","String","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","ALL_TRANSPORTS","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","transport","initialTransport","upgradeTransport","UPGRADE_TIMEOUT","DELAY_BEFORE_SENDING_EXTRA_REQUESTS","BYTES_SENT_HEALTHY_OVERRIDE","BYTES_RECEIVED_HEALTHY_OVERRIDE","MESSAGE_TYPE","MESSAGE_DATA","CONTROL_SHUTDOWN","CONTROL_RESET","CONTROL_ERROR","CONTROL_PONG","SWITCH_ACK","END_TRANSMISSION","PING","SERVER_HELLO","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","t","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","ServerActions","put","pathString","onComplete","hash","merge","refreshAuthToken","token","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","listeners_","trigger","eventType","listeners","context","on","validateEventType_","eventData","getInitialEvent","off","splice","find","et","OnlineMonitor","super","online_","currentlyOnline","MAX_PATH_DEPTH","MAX_PATH_LENGTH_BYTES","Path","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathToUrlEncodedString","encodeURIComponent","pathSlice","begin","slice","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathEquals","other","j","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPathPush","validationPath","child","validationPathPop","last","pop","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","GET_CONNECT_TIMEOUT","RECONNECT_MAX_DELAY_FOR_ADMINS","RECONNECT_DELAY_MULTIPLIER","RECONNECT_DELAY_RESET_TIMEOUT","SERVER_KILL_INTERRUPT_REASON","INVALID_TOKEN_THRESHOLD","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","Map","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","getInstance","onVisible_","onOnline_","action","onResponse","curReqNum","r","initConnection_","deferred","request","p","q","_queryObject","outstandingGet","index","undefined","sendGet_","promise","listen","currentHashFn","tag","queryId","_queryIdentifier","has","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","currentListenSpec","removeListen_","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isFirebaseSecret","tryAppCheck","authMethod","requestData","cred","res","onAuthRevoked_","onAppCheckRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","result","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","Date","getTime","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectSucceeded","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","all","interrupt","resume","delta","serverTimeOffset","map","normalizedPathString","statusCode","explanation","console","replace","queries","values","clientName","NamedNode","node","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","val","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","cmp","isEmpty","left","right","getNext","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","n","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","LLRBEmptyNode","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE$2","setMaxNode$1","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON$1","MAX_NODE$1","LeafNode","value_","priorityNode_","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","setNodeFromJSON","setMaxNode","PriorityIndex","aPriority","bPriority","indexCmp","PRIORITY_INDEX","LOG_2","Base12Num","logBase2","num","bitMask","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","buildFrom12Array","base12","root","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","Wrap","newIndex","next","indexName","newIndexSet","Object","assign","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","defineProperties","MAX","USE_HINZE","nodeFromJSON","json","jsonLeaf","childData","children","childrenHavePriority","hinzeJsonObj","childSet","sortedChildSet","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","ValueIndex","VALUE_INDEX","PUSH_CHARS","lastPushTime","lastRandChars","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","changeChildMoved","IndexedFilter","index_","newChild","affectedPath","source","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","matches","filtered","self","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","inRange","indexCompare","foundStartPost","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","oldChildSnap","nextChild","getChildAfterChild","compareNext","remainsInWindow","newEventCache","nextChildInRange","QueryParams","limitSet_","startSet_","startNameSet_","startAfterSet_","endSet_","endNameSet_","endBeforeSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasStartAfter","hasEndBefore","hasLimit","hasAnchoredLimit","queryParamsGetNodeFilter","queryParams","queryParamsToRestQueryStringParameters","qs","orderBy","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","listenId","getListenId_","thisListen","queryStringParameters","restRequest_","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","getNode","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForEachTree","prefixPath","func","sparseSnapshotTreeForEachChild","tree","forEach","StatsListener","collection_","last_","newStats","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","REPORT_STATS_INTERVAL","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceUser","fromUser","fromServer","tagged","newOperationSourceServer","newOperationSourceServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForChanges","eventGenerator","changes","eventCache","eventRegistrations","events","moves","change","eventGeneratorGenerateEventsForType","registrations","filteredChanges","filter","eventGeneratorCompareChanges","materializedChange","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","prevName","aWrapped","bWrapped","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","EmptyChildren","ImmutableTree","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","fullPath","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","empty","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeAddOverwrite","writeId","lastWriteId","allWrites","visibleWrites","writeTreeGetWrite","record","writeTreeRemoveWrite","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","writeTreeResetTree_","writeRecord","writeTreeLayerTree_","writeTreeDefaultFilter_","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","mergeAtPath","layeredCache","subMerge","writeTreeCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcCompleteChild","writeTreeShadowingWrite","writeTreeCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeRefCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","from","NoCompleteChildSource_","getCompleteChild","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","newViewProcessor","viewProcessorAssertIndexed","viewProcessor","viewProcessorApplyOperation","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","overwrite","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","viewProcessorRevertUserWrite","viewProcessorAckUserWrite","viewProcessorListenComplete","viewProcessorMaybeAddValueEvent","isLeafOrEmpty","oldCompleteSnap","viewProcessorGenerateEventCacheAfterServerEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","newEventSnap","viewProcessorCacheHasChild","changedChildren","curViewCache","viewProcessorApplyMerge","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","mergePath","serverCachePath","oldServerNode","serverChildren","View","initialViewCache","eventRegistrations_","indexFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","viewGetServerCache","view","viewGetCompleteServerCache","cache","viewIsEmpty","viewAddEventRegistration","eventRegistration","viewRemoveEventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewGenerateEventsForChanges_","viewGetInitialEvents","initialChanges","eventNode","referenceConstructor$1","referenceConstructor","SyncPoint","views","syncPointSetReferenceConstructor","syncPointGetReferenceConstructor","syncPointIsEmpty","syncPoint","syncPointApplyOperation","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointAddEventRegistration","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","viewQueryId","entries","_repo","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","syncTreeSetReferenceConstructor","syncTreeGetReferenceConstructor","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","syncTreeApplyOperationToSyncPoints_","syncTreeAckUserWrite","needToReevaluate","syncTreeApplyServerOverwrite","syncTreeApplyServerMerge","changeTree","fromObject","syncTreeApplyListenComplete","syncTreeApplyTaggedListenComplete","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","op","syncTreeApplyTaggedOperation_","syncTreeRemoveEventRegistration","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery_","defaultTag","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyTaggedQueryMerge","syncTreeAddEventRegistration","foundAncestorDefaultView","pathToSyncPoint","sp","childSyncPoint","viewAlreadyExists","syncTreeGetNextQueryTag_","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","includeHiddenSets","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","splitIndex","maybeChildSyncPoint","childMap","completeView","_key","childViews","removedQuery","removedQueryKey","removedQueryTag","queriesToStop","childQueries","queryToStop","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","generateWithValues","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","stringify","unused","existingNode","leaf","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeIsEmpty","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeForEachAncestor","treeGetPath","treeUpdateChild","childEmpty","childExists","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidRootPathString","validateFirebaseDataArg","fnName","validateFirebaseData","errorPrefix","hasDotValue","hasActualChild","validatePathString","argumentName","validateRootPathString","validateWritablePath","validateUrl","parsedUrl","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","MAX_TRANSACTION_RETRIES","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","appId","authOverride","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoOnServerInfoUpdate","statsReporter_","infoData_","infoSyncTree_","infoEvents","repoUpdateInfo","serverSyncTree_","repoServerTime","offsetNode","offset","repoGenerateServerValues","taggedChildren","raw","taggedSnap","repoRerunTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","repoSetWithPriority","newVal","repoLog","newNodeUnresolved","success","clearEvents","repoCallOnCompleteCallback","repoAbortTransactions","resolvedOnDisconnectTree","resolved","repoAddEventCallbackForQuery","repoRemoveEventCallbackForQuery","repoInterrupt","repoGetLatestState","excludeSets","repoSendReadyTransactions","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","allRun","every","transaction","repoSendTransactionQueue","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","callbacks","currentOutputSnapshotResolved","unwatcher","abortReason","rootMostTransactionNode","repoGetAncestorTransactionNode","repoRerunTransactionQueue","txnsToRerun","abortTransaction","currentNode","currentInputSnapshot","newDataNode","hasExplicitPriority","oldWriteId","newNodeResolved","applyLocally","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","order","nodeQueue","to","repoAbortTransactionsOnNode","lastSent","decodePath","pathStringDecoded","piece","decodeURIComponent","decodeQuery","queryString","results","charAt","segment","kv","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","hostWithoutPort","dotInd","DataEvent","snapshot","ref","getEventType","exportVal","CancelEvent","CallbackContext","snapshotCallback","cancelCallback","onValue","expDataSnapshot","previousChildName","call","onCancel","hasCancelCallback","userCallback","QueryImpl","_orderByCalled","ReferenceImpl","isEqual","sameRepo","samePath","sameQueryIdentifier","toJSON","parentPath","DataSnapshot","_node","_index","childRef","exists","hasChildren","db","_checkNotDeleted","_root","wrapCallback","ValueEventRegistration","callbackContext","ChildEventRegistration","eventToCheck","cancelCallbackOrListenOptions","onlyOnce","onceCallback","dataSnapshot","container","FIREBASE_DATABASE_EMULATOR_HOST_VAR","repos","useRestClient","repoManagerDatabaseFromApp","app","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","repoManagerCreateRepo","Database","repoManagerDeleteRepo","appName","appRepos","_repoInternal","_instanceStarted","_rootInternal","_delete","apiName","getDatabase","identifier","registerDatabase","variant","instanceIdentifier","getProvider","setMultipleInstances","prototype","simpleListen","echo","onEcho"],"sourceRoot":""}